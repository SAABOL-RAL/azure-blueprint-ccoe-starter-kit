name: Provision Azure Subscriptions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for provisioning'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - test
          - production
      managementGroupId:
        description: 'Target Management Group ID'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

jobs:
  provision-subscriptions:
    name: Provision Azure Subscriptions
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: List repository structure
        run: |
          echo "Repository root contents:"
          ls -la
          
          echo "\nChecking landing-zone directory:"
          if [ -d "landing-zone" ]; then
            ls -la landing-zone
            
            echo "\nChecking landing-zone/scripts directory:"
            if [ -d "landing-zone/scripts" ]; then
              ls -la landing-zone/scripts
            else
              echo "landing-zone/scripts directory not found!"
            fi
          else
            echo "landing-zone directory not found!"
          fi
          
      - name: Setup PowerShell module
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install Azure PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Subscription -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Resources -Force -AllowClobber -Scope CurrentUser
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          
      - name: Find and run provisioning script
        id: provision
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Logged in to Azure, starting subscription provisioning..."
          
          # List repository structure for debugging
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Force | Format-Table -AutoSize
          
          # Check multiple possible script locations
          $possiblePaths = @(
            "./landing-zone/scripts/provision-subscriptions.ps1",
            "./scripts/provision-subscriptions.ps1",
            "./provision-subscriptions.ps1",
            "./landing-zone/provision-subscriptions.ps1"
          )
          
          $scriptPath = $null
          foreach ($path in $possiblePaths) {
            Write-Host "Checking for script at: $path"
            if (Test-Path -Path $path) {
              $scriptPath = $path
              Write-Host "✅ Found script at: $path"
              break
            }
          }
          
          if ($scriptPath) {
            # Run the subscription provisioning script
            & $scriptPath -Environment "${{ github.event.inputs.environment }}" -ManagementGroupId "${{ github.event.inputs.managementGroupId }}" -Verbose
          } else {
            Write-Host "❌ Provisioning script not found! Looked in these locations:"
            $possiblePaths | ForEach-Object { Write-Host "  - $_" }
            
            # Create empty results file for downstream steps
            Write-Warning "No provisioning script found. Creating empty results file."
            '[]' | Out-File -FilePath ./subscription-results.json
          }
            
          # Check if results file exists
          if (Test-Path -Path ./subscription-results.json) {
            $results = Get-Content -Path ./subscription-results.json | ConvertFrom-Json
            $results | ConvertTo-Json -Depth 10 | Out-File -FilePath subscription-results.json
            
            # Output summary for GitHub workflow
            $count = if ($results -is [array]) { $results.Count } else { 1 }
            Write-Host "::set-output name=subscription_count::$count"
            Write-Host "Successfully processed $count subscriptions"
          } else {
            Write-Warning "No subscription results file found. Creating empty one."
            '[]' | Out-File -FilePath subscription-results.json
            Write-Host "::set-output name=subscription_count::0"
          }
          
      - name: Upload subscription results
        uses: actions/upload-artifact@v4
        with:
          name: subscription-results
          path: subscription-results.json
          retention-days: 30
          
      - name: Generate provisioning report
        shell: pwsh
        run: |
          $reportContent = "# Subscription Provisioning Report`n"
          $reportContent += "**Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n"
          $reportContent += "**Environment:** ${{ github.event.inputs.environment }}`n"
          $reportContent += "**User:** GEP-V31s`n\n"
          
          if (Test-Path -Path ./subscription-results.json) {
            $results = Get-Content -Path ./subscription-results.json | ConvertFrom-Json
            
            if ($results -and ($results -is [array]) -and ($results.Count -gt 0)) {
              $reportContent += "## Provisioned Subscriptions`n"
              $reportContent += "| Subscription Name | Subscription ID | Management Group | Status |`n"
              $reportContent += "|------------------|----------------|-----------------|--------|`n"
              
              foreach ($sub in $results) {
                $reportContent += "| $($sub.Name) | $($sub.SubscriptionId) | $($sub.ManagementGroupId) | ✓ Success |`n"
              }
            } else {
              $reportContent += "## No Subscriptions Provisioned`n"
              $reportContent += "No subscriptions were provisioned in this run.`n"
            }
          } else {
            $reportContent += "## Results File Not Found`n"
            $reportContent += "No subscription results file was generated.`n"
          }
          
          $reportContent | Out-File -FilePath ./provisioning-report.md
          
      - name: Upload provisioning report
        uses: actions/upload-artifact@v4
        with:
          name: provisioning-report
          path: provisioning-report.md
          retention-days: 30
          
  notify:
    name: Send notification
    needs: provision-subscriptions
    runs-on: ubuntu-latest
    if: ${{ always() }}
    
    steps:
      - name: Notify status
        run: |
          status="${{ needs.provision-subscriptions.result }}"
          if [ "$status" == "success" ]; then
            echo "Subscriptions provisioned successfully"
          else
            echo "Warning: Subscription provisioning process completed with status: $status"
          fi
          # Add notification logic (email, Teams, etc.)