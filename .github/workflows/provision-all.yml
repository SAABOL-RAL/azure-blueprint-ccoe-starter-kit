# ==========================================================================
# Enterprise Azure Management Group Subscription Provisioning
# ==========================================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow creates subscriptions for your entire management group hierarchy:
# - Creates subscriptions defined in your management group structure
# - Handles both new subscriptions and existing subscription validation
# - Supports both configuration files and dynamic discovery
# - Uses tag-based provisioning to control subscription properties
#
# CUSTOMIZATION REQUIREMENTS:
# - Ensure a configuration file exists at landingzones/config/subscriptions.json
# - Modify the management group ID patterns to match your hierarchy
# - Set appropriate subscription quotas and limits in your Azure EA portal

name: Provision Azure Subscriptions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for provisioning'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - test
          - production
      managementGroupId:
        description: 'Root Management Group ID (leave empty for tenant root)'
        required: false
        type: string
      dryRun:
        description: 'Validate without creating subscriptions'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  # Billing account information
  AZURE_BILLING_ACCOUNT_ID: ${{ secrets.AZURE_BILLING_ACCOUNT_ID }}
  AZURE_BILLING_PROFILE_ID: ${{ secrets.AZURE_BILLING_PROFILE_ID }}
  AZURE_INVOICE_SECTION_ID: ${{ secrets.AZURE_INVOICE_SECTION_ID }}

jobs:
  provision-subscriptions:
    name: Provision Azure Subscriptions
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Verify prerequisites
      - name: Verify billing account secrets
        run: |
          # Verification logic (same as before)
          # ...
          echo "All subscription provisioning secrets are configured."
      
      # Setup PowerShell and Azure modules
      - name: Setup PowerShell module
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install Azure PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Subscription -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Resources -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Billing -Force -AllowClobber -Scope CurrentUser
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      # ==================================================================
      # Check for subscription configuration file or existing script
      # ==================================================================
      - name: Locate subscription configuration
        id: find_config
        shell: pwsh
        run: |
          # Check for subscription config file
          $configPaths = @(
            "./landingzones/config/subscriptions.json",
            "./config/subscriptions.json",
            "./subscriptions.json"
          )
          
          $configFound = $false
          foreach ($path in $configPaths) {
            if (Test-Path $path) {
              Write-Host "✅ Found subscription configuration at: $path"
              echo "CONFIG_PATH=$path" >> $env:GITHUB_ENV
              $configFound = $true
              break
            }
          }
          
          # Check for provisioning script if no config file found
          if (-not $configFound) {
            $scriptPaths = @(
              "./landing-zone/scripts/provision-subscriptions.ps1",
              "./landingzones/scripts/provision-subscriptions.ps1",
              "./scripts/provision-subscriptions.ps1"
            )
            
            foreach ($path in $scriptPaths) {
              if (Test-Path $path) {
                Write-Host "✅ Found provisioning script at: $path"
                echo "SCRIPT_PATH=$path" >> $env:GITHUB_ENV
                echo "SCRIPT_FOUND=true" >> $env:GITHUB_ENV
                break
              }
            }
          } else {
            echo "CONFIG_FOUND=true" >> $env:GITHUB_ENV
          }
          
          if (-not $configFound -and $env:SCRIPT_FOUND -ne "true") {
            Write-Host "⚠️ No subscription configuration or script found. Will use dynamic management group discovery."
          }

      # ==================================================================
      # OPTION 1: Use existing configuration file
      # ==================================================================
      - name: Provision subscriptions from configuration file
        if: env.CONFIG_FOUND == 'true'
        shell: pwsh
        run: |
          Write-Host "Creating subscriptions from configuration file..."
          
          # Read configuration file
          $config = Get-Content -Path "${{ env.CONFIG_PATH }}" | ConvertFrom-Json
          $results = @()
          
          # Determine if MCA or EA account
          $billingAccountId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
          $isMCA = $billingAccountId -match "-"
          
          # Process each subscription in config
          foreach ($sub in $config.subscriptions) {
            $subName = $sub.name
            $mgId = $sub.managementGroupId
            $environment = $sub.environment
            $offerType = $sub.offerType -or "DevTest"
            
            Write-Host "Processing subscription: $subName (MG: $mgId)"
            
            # Check if subscription already exists
            $existingSub = Get-AzSubscription -SubscriptionName $subName -ErrorAction SilentlyContinue
            if ($existingSub) {
              Write-Host "Subscription $subName already exists. Validating management group assignment."
              $subId = $existingSub.Id
              
              # Record existing subscription
              $results += [PSCustomObject]@{
                Name = $subName
                SubscriptionId = $subId
                ManagementGroupId = $mgId
                Environment = $environment
                Status = "Existing"
              }
              
              # Continue to next subscription
              continue
            }
            
            # Skip creation in dry run mode
            if ("${{ github.event.inputs.dryRun }}" -eq "true") {
              Write-Host "DRY RUN: Would create subscription $subName for management group $mgId"
              $results += [PSCustomObject]@{
                Name = $subName
                SubscriptionId = "dry-run-no-id"
                ManagementGroupId = $mgId
                Environment = $environment
                Status = "Dry Run"
              }
              continue
            }
            
            try {
              # Create subscription
              if ($isMCA) {
                Write-Host "Creating MCA subscription: $subName"
                $skuId = if ($offerType -eq "Production") { "0001" } else { "0001" } # Adjust SKU IDs as needed
                
                $subParams = @{
                  Name = $subName
                  BillingAccountId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
                  BillingProfileId = "${{ env.AZURE_BILLING_PROFILE_ID }}"
                  InvoiceSectionId = "${{ env.AZURE_INVOICE_SECTION_ID }}"
                  DisplayName = $subName
                  SkuId = $skuId
                }
                
                $newSub = New-AzSubscription @subParams
              } else {
                Write-Host "Creating EA subscription: $subName"
                $offerTypeCode = if ($offerType -eq "Production") { "MS-AZR-0017P" } else { "MS-AZR-0148P" }
                
                $subParams = @{
                  OfferType = $offerTypeCode
                  Name = $subName
                  EnrollmentAccountObjectId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
                }
                
                $newSub = New-AzSubscription @subParams
              }
              
              $subId = $newSub.SubscriptionId
              Write-Host "Created subscription $subName with ID: $subId"
              
              # Record new subscription
              $results += [PSCustomObject]@{
                Name = $subName
                SubscriptionId = $subId
                ManagementGroupId = $mgId
                Environment = $environment
                Status = "Created"
              }
              
              # Assign to management group if specified
              if (-not [string]::IsNullOrWhiteSpace($mgId)) {
                Write-Host "Waiting 60 seconds for subscription provisioning to complete..."
                Start-Sleep -Seconds 60
                
                Write-Host "Assigning subscription to management group: $mgId"
                New-AzManagementGroupSubscription -GroupId $mgId -SubscriptionId $subId
                Write-Host "Assignment completed"
              }
            }
            catch {
              Write-Host "Error creating subscription $subName: $_"
              $results += [PSCustomObject]@{
                Name = $subName
                SubscriptionId = "error"
                ManagementGroupId = $mgId
                Environment = $environment
                Status = "Failed: $_"
              }
            }
          }
          
          # Save results
          $results | ConvertTo-Json -Depth 10 | Out-File -FilePath ./subscription-results.json
      
      # ==================================================================
      # OPTION 2: Use existing script
      # ==================================================================
      - name: Execute existing provisioning script
        if: env.CONFIG_FOUND != 'true' && env.SCRIPT_FOUND == 'true'
        shell: pwsh
        run: |
          Write-Host "Executing provisioning script at: ${{ env.SCRIPT_PATH }}"
          
          $dryRun = "${{ github.event.inputs.dryRun }}" -eq "true"
          $mgId = "${{ github.event.inputs.managementGroupId }}"
          $env = "${{ github.event.inputs.environment }}"
          
          # Construct parameters for the script
          $scriptParams = @{
            Environment = $env
          }
          
          if (-not [string]::IsNullOrWhiteSpace($mgId)) {
            $scriptParams.Add("ManagementGroupId", $mgId)
          }
          
          if ($dryRun) {
            $scriptParams.Add("DryRun", $true)
          }
          
          # Execute script with parameters
          & "${{ env.SCRIPT_PATH }}" @scriptParams -Verbose

      # ==================================================================
      # OPTION 3: Management Group Structure Discovery
      # ==================================================================
      - name: Dynamic management group subscription provisioning
        if: env.CONFIG_FOUND != 'true' && env.SCRIPT_FOUND != 'true'
        shell: pwsh
        run: |
          Write-Host "Creating comprehensive management group subscription structure..."
          
          # Define the inline script for management group discovery and subscription provisioning
          $scriptContent = @'
          param (
              [string]$RootManagementGroupId = "",
              [switch]$DryRun = $false,
              [string]$Environment = "production"
          )
          
          # Set strict error handling
          $ErrorActionPreference = "Stop"
          $results = @()
          
          # Get execution context
          $context = Get-AzContext
          Write-Host "Connected as: $($context.Account.Id)"
          Write-Host "Tenant: $($context.Tenant.Id)"
          
          # Determine if MCA or EA account
          $billingAccountId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
          $isMCA = $billingAccountId -match "-"
          
          # Define subscription structure based on Enterprise-scale Landing Zone
          $landingZoneStructure = @{
            # Platform subscriptions
            "platform" = @(
              @{ 
                Name = "connectivity"; 
                DisplayName = "Connectivity"; 
                OfferType = "Production";
                Required = $true 
              },
              @{ 
                Name = "management"; 
                DisplayName = "Management"; 
                OfferType = "Production";
                Required = $true 
              },
              @{ 
                Name = "identity"; 
                DisplayName = "Identity"; 
                OfferType = "Production";
                Required = $true 
              }
            );
            
            # Landing zone subscriptions
            "landingzones" = @(
              @{ 
                Name = "corp"; 
                DisplayName = "Corp"; 
                OfferType = "Production";
                Required = $true 
              },
              @{ 
                Name = "online"; 
                DisplayName = "Online"; 
                OfferType = "Production";
                Required = $false 
              }
            );
            
            # Sandbox subscriptions
            "sandboxes" = @(
              @{ 
                Name = "sandbox"; 
                DisplayName = "DevTest Sandbox"; 
                OfferType = "DevTest";
                Required = $true 
              }
            );
          }
          
          # Get management group structure
          function Get-ManagementGroups {
            param (
                [string]$ParentId = ""
            )
            
            $params = @{}
            if ($ParentId) {
                $params.ParentId = $ParentId
            }
            
            try {
                $groups = Get-AzManagementGroup @params -Expand -Recurse
                return $groups
            }
            catch {
                Write-Error "Failed to retrieve management groups: $_"
                return $null
            }
          }
          
          # Create a subscription
          function New-LandingZoneSubscription {
            param (
                [string]$DisplayName,
                [string]$ManagementGroupId,
                [string]$OfferType = "Production" # Production or DevTest
            )
            
            Write-Host "Creating subscription: $DisplayName for MG: $ManagementGroupId"
            
            # Skip actual creation in DryRun mode
            if ($DryRun) {
                Write-Host "DRY RUN: Would create subscription $DisplayName"
                return [PSCustomObject]@{
                    Name = $DisplayName
                    SubscriptionId = "dry-run-$((New-Guid).Guid.Substring(0,8))"
                    Status = "Dry Run"
                }
            }
            
            try {
                if ($isMCA) {
                    Write-Host "Using MCA account for provisioning"
                    $skuId = if ($OfferType -eq "Production") { "0001" } else { "0001" }
                    
                    $params = @{
                        Name = $DisplayName
                        BillingAccountId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
                        BillingProfileId = "${{ env.AZURE_BILLING_PROFILE_ID }}"
                        InvoiceSectionId = "${{ env.AZURE_INVOICE_SECTION_ID }}"
                        DisplayName = $DisplayName
                        SkuId = $skuId
                    }
                    
                    $newSubscription = New-AzSubscription @params
                }
                else {
                    Write-Host "Using EA account for provisioning"
                    $offerTypeCode = if ($OfferType -eq "Production") { "MS-AZR-0017P" } else { "MS-AZR-0148P" }
                    
                    $params = @{
                        OfferType = $offerTypeCode
                        Name = $DisplayName
                        EnrollmentAccountObjectId = "${{ env.AZURE_BILLING_ACCOUNT_ID }}"
                    }
                    
                    $newSubscription = New-AzSubscription @params
                }
                
                return [PSCustomObject]@{
                    Name = $DisplayName
                    SubscriptionId = $newSubscription.SubscriptionId
                    Status = "Created"
                }
            }
            catch {
                Write-Error "Failed to create subscription $DisplayName : $_"
                return [PSCustomObject]@{
                    Name = $DisplayName
                    SubscriptionId = "error"
                    Status = "Failed: $_"
                }
            }
          }
          
          # Process management group and create subscriptions
          function Process-ManagementGroup {
            param (
                [object]$Group
            )
            
            $groupName = $Group.DisplayName
            $groupId = $Group.Name
            
            Write-Host "Processing management group: $groupName ($groupId)"
            
            # Check if this is a platform management group
            if ($groupName -match "platform|identity|connectivity|management") {
                $category = "platform"
            }
            # Check if this is a landing zone management group
            elseif ($groupName -match "landingzones|corp|online") {
                $category = "landingzones"
            }
            # Check if this is a sandbox management group
            elseif ($groupName -match "sandbox|dev|test") {
                $category = "sandboxes"
            }
            else {
                $category = ""
            }
            
            # Create appropriate subscriptions if needed
            if ($category) {
                foreach ($subTemplate in $landingZoneStructure[$category]) {
                    if ($subTemplate.Required) {
                        $subDisplayName = "$($subTemplate.DisplayName)-$($Environment)"
                        
                        # Check if subscription exists
                        $existingSub = Get-AzSubscription -SubscriptionName $subDisplayName -ErrorAction SilentlyContinue
                        if ($existingSub) {
                            Write-Host "Subscription $subDisplayName already exists with ID: $($existingSub.Id)"
                            
                            # Add to results
                            $results += [PSCustomObject]@{
                                Name = $subDisplayName
                                SubscriptionId = $existingSub.Id
                                ManagementGroupId = $groupId
                                Category = $category
                                Environment = $Environment
                                Status = "Existing"
                            }
                        }
                        else {
                            # Create new subscription
                            $newSub = New-LandingZoneSubscription -DisplayName $subDisplayName -ManagementGroupId $groupId -OfferType $subTemplate.OfferType
                            
                            # Add to results
                            $results += [PSCustomObject]@{
                                Name = $subDisplayName
                                SubscriptionId = $newSub.SubscriptionId
                                ManagementGroupId = $groupId
                                Category = $category
                                Environment = $Environment
                                Status = $newSub.Status
                            }
                            
                            # Assign to management group if not dry run
                            if (-not $DryRun -and $newSub.Status -eq "Created") {
                                Write-Host "Waiting 60 seconds for subscription provisioning to complete..."
                                Start-Sleep -Seconds 60
                                
                                Write-Host "Assigning subscription to management group: $groupId"
                                New-AzManagementGroupSubscription -GroupId $groupId -SubscriptionId $newSub.SubscriptionId
                            }
                        }
                    }
                }
            }
            
            # Process child management groups
            foreach ($childGroup in $Group.Children) {
                Process-ManagementGroup -Group $childGroup
            }
          }
          
          # Main execution
          try {
              Write-Host "Starting management group discovery and subscription provisioning..."
              
              # Get management group structure
              $rootGroups = if ($RootManagementGroupId) {
                  Get-ManagementGroups -ParentId $RootManagementGroupId
              } else {
                  Get-ManagementGroups
              }
              
              # Process management groups and create subscriptions
              foreach ($group in $rootGroups) {
                  Process-ManagementGroup -Group $group
              }
              
              # Save results
              $results | ConvertTo-Json -Depth 10 | Out-File -FilePath ./subscription-results.json
              Write-Host "Results saved to subscription-results.json"
              
              return $results
          }
          catch {
              Write-Error "Subscription provisioning error: $_"
              throw
          }
          '@
          
          # Save the script to file
          $scriptContent | Out-File -FilePath ./provision-all-subscriptions.ps1
          
          # Execute the script
          $dryRun = "${{ github.event.inputs.dryRun }}" -eq "true"
          $mgId = "${{ github.event.inputs.managementGroupId }}"
          $env = "${{ github.event.inputs.environment }}"
          
          & ./provision-all-subscriptions.ps1 `
              -RootManagementGroupId $mgId `
              -Environment $env `
              -DryRun:$dryRun

      # Upload results and generate report
      - name: Upload subscription results
        uses: actions/upload-artifact@v4
        with:
          name: subscription-results
          path: subscription-results.json
          retention-days: 30
          
      - name: Generate provisioning report
        shell: pwsh
        run: |
          if (Test-Path -Path ./subscription-results.json) {
              $results = Get-Content -Path ./subscription-results.json | ConvertFrom-Json
              
              $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
              $reportContent = @"
          # Enterprise Subscription Provisioning Report
          
          **Date:** $timestamp
          **Environment:** ${{ github.event.inputs.environment }}
          **Triggered by:** ${{ github.actor }}
          **Dry Run Mode:** ${{ github.event.inputs.dryRun }}
          
          ## Management Group Subscriptions
          
          | Subscription Name | Subscription ID | Management Group | Status | Category |
          |------------------|----------------|-----------------|--------|---------|
          "@
              
              if ($results -is [array] -and $results.Count -gt 0) {
                  foreach ($sub in $results) {
                      $mgId = $sub.ManagementGroupId
                      $status = $sub.Status
                      $category = $sub.Category -or "N/A"
                      
                      # Format status with emoji
                      $statusEmoji = switch -Regex ($status) {
                          "Created" { "✅ Created" }
                          "Existing" { "✓ Existing" }
                          "Dry Run" { "🔍 Dry Run" }
                          "Failed" { "❌ Failed" }
                          default { $status }
                      }
                      
                      $reportContent += "`n| $($sub.Name) | $($sub.SubscriptionId) | $mgId | $statusEmoji | $category |"
                  }
              } else {
                  $reportContent += "`n| No subscriptions were provisioned | | | |"
              }
              
              $reportContent | Out-File -FilePath ./provisioning-report.md
              cat ./provisioning-report.md
              
              # Add to GitHub step summary
              $reportContent | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
          } else {
              Write-Warning "No subscription results file was generated."
              echo "## Subscription Provisioning" > $env:GITHUB_STEP_SUMMARY
              echo "No subscription results were generated. Check the logs for errors." >> $env:GITHUB_STEP_SUMMARY
          }