name: Provision Azure Subscriptions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for provisioning'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - test
          - production
      managementGroupId:
        description: 'Target Management Group ID'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

jobs:
  provision-subscriptions:
    name: Provision Azure Subscriptions
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup PowerShell module
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install Azure PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Subscription -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Resources -Force -AllowClobber -Scope CurrentUser
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          
      - name: Provision subscriptions
        id: provision
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Logged in to Azure, starting subscription provisioning..."
          
          # Check if the script exists before running
          if (Test-Path -Path "./landing-zone/scripts/provision-subscriptions.ps1") {
            # Run the subscription provisioning script
            ./landing-zone/scripts/provision-subscriptions.ps1 `
              -Environment "${{ github.event.inputs.environment }}" `
              -ManagementGroupId "${{ github.event.inputs.managementGroupId }}" `
              -Verbose
          } else {
            Write-Error "Provisioning script not found at expected path!"
            exit 1
          }
            
          # Check if results file exists
          if (Test-Path -Path ./subscription-results.json) {
            $results = Get-Content -Path ./subscription-results.json | ConvertFrom-Json
            $results | ConvertTo-Json -Depth 10 | Out-File -FilePath subscription-results.json
            
            # Output summary for GitHub workflow
            Write-Host "::set-output name=subscription_count::$($results.Count)"
            Write-Host "Successfully provisioned $($results.Count) subscriptions"
          } else {
            Write-Warning "No subscription results file found. Creating empty one."
            '[]' | Out-File -FilePath subscription-results.json
            Write-Host "::set-output name=subscription_count::0"
          }
          
      - name: Upload subscription results
        uses: actions/upload-artifact@v4
        with:
          name: subscription-results
          path: subscription-results.json
          retention-days: 30
          
      - name: Apply policies to new subscriptions
        if: steps.provision.outputs.subscription_count > 0
        run: |
          echo "Applying policies to newly provisioned subscriptions..."
          if [ -f "./landing-zone/scripts/assign-subscriptions.sh" ]; then
            ./landing-zone/scripts/assign-subscriptions.sh \
              --subscriptions-file ./subscription-results.json \
              --environment ${{ github.event.inputs.environment }}
          else
            echo "Warning: Policy assignment script not found!"
          fi
            
      - name: Generate provisioning report
        shell: pwsh
        run: |
          $results = Get-Content -Path ./subscription-results.json | ConvertFrom-Json
          
          $reportContent = "# Subscription Provisioning Report`n"
          $reportContent += "**Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n"
          $reportContent += "**Environment:** ${{ github.event.inputs.environment }}`n"
          $reportContent += "**User:** GEP-V1s`n`n"
          $reportContent += "**Runner Version:** 2.325.0`n`n"
          $reportContent += "## Provisioned Subscriptions`n"
          
          if ($results.Count -gt 0) {
            $reportContent += "| Subscription Name | Subscription ID | Management Group | Status |`n"
            $reportContent += "|------------------|----------------|-----------------|--------|`n"
            
            foreach ($sub in $results) {
              $reportContent += "| $($sub.Name) | $($sub.SubscriptionId) | $($sub.ManagementGroupId) | âœ“ Success |`n"
            }
          } else {
            $reportContent += "No subscriptions were provisioned in this run.`n"
          }
          
          $reportContent | Out-File -FilePath ./provisioning-report.md
          
      - name: Upload provisioning report
        uses: actions/upload-artifact@v4
        with:
          name: provisioning-report
          path: provisioning-report.md
          retention-days: 30

  notify:
    name: Send notification
    needs: provision-subscriptions
    runs-on: ubuntu-latest
    if: ${{ always() }}
    
    steps:
      - name: Notify success
        if: ${{ needs.provision-subscriptions.result == 'success' }}
        run: |
          echo "Subscriptions provisioned successfully"
          # Add notification logic (email, Teams, etc.)
          
      - name: Notify failure
        if: ${{ needs.provision-subscriptions.result == 'failure' }}
        run: |
          echo "Failed to provision subscriptions"
          # Add notification logic (email, Teams, etc.)