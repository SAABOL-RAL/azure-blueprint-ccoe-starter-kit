# ==========================================================================
# Enterprise Azure Landing Zone - Subscription Provisioning
# ==========================================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow automates the provisioning of Azure subscriptions in an enterprise context:
# - Creates subscriptions under a billing account
# - Associates subscriptions with management groups
# - Sets up initial tags and policies
# - Generates audit records of provisioned resources
#
# SECRETS CONFIGURATION:
# - AZURE_TENANT_ID: Your Azure Active Directory tenant ID
# - AZURE_CLIENT_ID: App registration client ID with federated credentials
# - MANAGEMENT_SUBSCRIPTION_ID: The subscription used for management operations
# - AZURE_BILLING_ACCOUNT_ID: EA/MCA billing account ID
# - AZURE_BILLING_PROFILE_ID: Billing profile ID (for MCA accounts)
# - AZURE_INVOICE_SECTION_ID: Invoice section ID (for MCA accounts)
#
# SCRIPT REQUIREMENTS:
# - Ensure provision-subscriptions.ps1 exists in landing-zone/scripts/
# - Script should accept Environment and ManagementGroupId parameters
# - Script should output results to subscription-results.json

name: Provision Azure Subscriptions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for provisioning'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - test
          - production
      managementGroupId:
        description: 'Target Management Group ID'
        required: false
        type: string

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

# ==========================================================================
# ENVIRONMENT VARIABLES - BILLING ACCOUNT & MANAGEMENT SUBSCRIPTION CONFIG
# ==========================================================================
# PROMPT GUIDANCE:
# - You MUST configure these secrets before running the workflow 
# - MANAGEMENT_SUBSCRIPTION_ID is required for API operations
# - For Enterprise Agreement (EA), only AZURE_BILLING_ACCOUNT_ID is needed
# - For Microsoft Customer Agreement (MCA), all three billing secrets are required
# ==========================================================================
env:
  # Authentication secrets
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  
  # Subscription management
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  
  # Billing account information
  AZURE_BILLING_ACCOUNT_ID: ${{ secrets.AZURE_BILLING_ACCOUNT_ID }}
  AZURE_BILLING_PROFILE_ID: ${{ secrets.AZURE_BILLING_PROFILE_ID }}
  AZURE_INVOICE_SECTION_ID: ${{ secrets.AZURE_INVOICE_SECTION_ID }}

jobs:
  provision-subscriptions:
    name: Provision Azure Subscriptions
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # ==========================================================================
      # VERIFY BILLING AND SUBSCRIPTION SECRETS
      # ==========================================================================
      # PROMPT GUIDANCE:
      # - This step verifies all required secrets are available
      # - Add custom conditions based on your agreement type (EA vs MCA)
      # - Provides early failure with clear error messages if secrets are missing
      # ==========================================================================
      - name: Verify billing account secrets
        run: |
          # Verify essential authentication secrets
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "::error::AZURE_TENANT_ID secret is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "::error::AZURE_CLIENT_ID secret is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}" ]; then
            echo "::error::MANAGEMENT_SUBSCRIPTION_ID secret is not set"
            exit 1
          fi
          
          # Verify billing account secrets
          if [ -z "${{ secrets.AZURE_BILLING_ACCOUNT_ID }}" ]; then
            echo "::error::AZURE_BILLING_ACCOUNT_ID secret is not set"
            exit 1
          fi
          
          # For MCA accounts, verify additional required fields
          if [[ "${{ secrets.AZURE_BILLING_ACCOUNT_ID }}" == *"-"* ]]; then
            if [ -z "${{ secrets.AZURE_BILLING_PROFILE_ID }}" ]; then
              echo "::error::AZURE_BILLING_PROFILE_ID secret is required for MCA accounts"
              exit 1
            fi
            
            if [ -z "${{ secrets.AZURE_INVOICE_SECTION_ID }}" ]; then
              echo "::error::AZURE_INVOICE_SECTION_ID secret is required for MCA accounts"
              exit 1
            fi
            
            echo "MCA billing account configuration verified."
          else
            echo "EA billing account configuration verified."
          fi
          
          echo "All subscription provisioning secrets are configured."

      - name: Setup PowerShell module
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install Azure PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Subscription -Force -AllowClobber -Scope CurrentUser
          Install-Module -Name Az.Resources -Force -AllowClobber -Scope CurrentUser
          
      # ==========================================================================
      # AZURE LOGIN WITH MANAGEMENT SUBSCRIPTION
      # ==========================================================================
      # PROMPT GUIDANCE:
      # - Always provide subscription-id for the azure/login action
      # - For subscription creation, ensure principal has EA/MCA admin rights
      # - Check app permissions in Azure if login fails
      # ==========================================================================
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          
      # Remaining steps from previous version...