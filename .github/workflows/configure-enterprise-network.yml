name: Configure Enterprise Network Architecture

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Primary Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      skipSpokes:
        description: 'Skip specific spokes (comma-separated: management,identity,landingzone-a2,landingzone-p1)'
        required: false
        type: string
        default: ''

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  LANDINGZONE_A2_SUBSCRIPTION_ID: ${{ secrets.LANDINGZONE_A2_SUBSCRIPTION_ID }}
  LANDINGZONE_P1_SUBSCRIPTION_ID: ${{ secrets.LANDINGZONE_P1_SUBSCRIPTION_ID }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  HUB_RESOURCE_GROUP: "rg-connectivity-hub"
  HUB_VNET_NAME: "vnet-hub"

jobs:
  validate-prerequisites:
    name: Validate Network Prerequisites
    runs-on: ubuntu-latest
    outputs:
      hub_exists: ${{ steps.hub-info.outputs.hub_exists }}
      management_subscription_set: ${{ steps.setoutputs.outputs.management_subscription_set }}
      identity_subscription_set: ${{ steps.setoutputs.outputs.identity_subscription_set }}
      landingzone_a2_subscription_set: ${{ steps.setoutputs.outputs.landingzone_a2_subscription_set }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify hub network exists
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      - name: Get hub network information
        id: hub-info
        run: |
          HUB_RG="${{ env.HUB_RESOURCE_GROUP }}"
          HUB_VNET="${{ env.HUB_VNET_NAME }}"
          if ! az group show --name "$HUB_RG" &>/dev/null; then
            echo "::warning::Hub resource group $HUB_RG not found. Did you run deploy-connectivity.yml first?"
            echo "hub_exists=false" >> $GITHUB_OUTPUT
            echo "HUB_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          if ! az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" &>/dev/null; then
            echo "::warning::Hub VNet $HUB_VNET not found in $HUB_RG. Did you run deploy-connectivity.yml first?"
            echo "hub_exists=false" >> $GITHUB_OUTPUT
            echo "HUB_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          HUB_VNET_ID=$(az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" --query id -o tsv)
          echo "HUB_VNET_ID=$HUB_VNET_ID" >> $GITHUB_ENV
          HUB_ADDRESS_SPACE=$(az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" --query "addressSpace.addressPrefixes[0]" -o tsv)
          echo "HUB_ADDRESS_SPACE=$HUB_ADDRESS_SPACE" >> $GITHUB_ENV
          echo "hub_exists=true" >> $GITHUB_OUTPUT
          echo "HUB_EXISTS=true" >> $GITHUB_ENV

      - name: Set outputs for job-level conditions
        id: setoutputs
        run: |
          echo "management_subscription_set=${{ env.MANAGEMENT_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT
          echo "identity_subscription_set=${{ env.IDENTITY_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT
          echo "landingzone_a2_subscription_set=${{ env.LANDINGZONE_A2_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT

  deploy-management-network:
    name: Deploy Management Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.management_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'management') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow) ...
      # (see previous messages for full step detail, omitted here for brevity)

  deploy-identity-network:
    name: Deploy Identity Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.identity_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'identity') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow) ...
      # (see previous messages for full step detail, omitted here for brevity)

  deploy-landingzone-a2-network:
    name: Deploy Analytics Landing Zone Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.landingzone_a2_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'landingzone-a2') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow) ...
      # (see previous messages for full step detail, omitted here for brevity)

  integrate-dns:
    name: Integrate Private DNS Zones
    needs: [deploy-management-network, deploy-identity-network]
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow) ...
      # (see previous messages for full step detail, omitted here for brevity)

  validate-network:
    name: Validate Network Configuration
    needs: [deploy-management-network, deploy-identity-network, integrate-dns]
    runs-on: ubuntu-latest
    if: always() && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure (Connectivity Subscription)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      - name: Validate hub-spoke peering
        shell: pwsh
        run: |
          Write-Host "Validating VNet peering configuration..."
          $hubPeerings = az network vnet peering list `
            --resource-group "${{ env.HUB_RESOURCE_GROUP }}" `
            --vnet-name "${{ env.HUB_VNET_NAME }}" | ConvertFrom-Json
          $report = @{
            timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            environment = "${{ env.ENVIRONMENT }}"
            hubVNet = "${{ env.HUB_VNET_NAME }}"
            peerings = @()
          }
          foreach ($peering in $hubPeerings) {
            $spokeName = $peering.name -replace "peering-to-", ""
            $peeringStatus = [PSCustomObject]@{
              spokeName = $spokeName
              peeringState = $peering.peeringState
              remoteVNetId = $peering.remoteVirtualNetwork.id
              allowGatewayTransit = $peering.allowGatewayTransit
              useRemoteGateways = $peering.useRemoteGateways
              status = if ($peering.peeringState -eq "Connected") { "✅ Connected" } else { "❌ $($peering.peeringState)" }
            }
            $report.peerings += $peeringStatus
          }
          $reportContent = @"
          # Enterprise Network Configuration Report

          **Date:** $($report.timestamp)
          **Environment:** $($report.environment)
          **Hub VNet:** $($report.hubVNet)

          ## VNet Peering Status

          | Spoke Name | Status | Remote VNet | Gateway Transit | Use Remote Gateways |
          |------------|--------|------------|----------------|-------------------|
          "@
          foreach ($peering in $report.peerings) {
            $reportContent += "`n| $($peering.spokeName) | $($peering.status) | $($peering.remoteVNetId) | $($peering.allowGatewayTransit) | $($peering.useRemoteGateways) |"
          }
          $reportContent | Out-File -FilePath network-topology.md
          cat network-topology.md
          $reportContent | Out-File -FilePath $env:GITHUB_STEP_SUMMARY

      - name: Upload network topology report
        uses: actions/upload-artifact@v4
        with:
          name: network-topology-report
          path: network-topology.md
          retention-days: 30
