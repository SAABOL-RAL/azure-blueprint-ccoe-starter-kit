name: Configure Enterprise Network Architecture

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Primary Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      skipSpokes:
        description: 'Skip specific spokes (comma-separated: management,identity,landingzone-a2,sandbox,landingzone-p1)'
        required: false
        type: string
        default: ''

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  LANDINGZONE_A2_SUBSCRIPTION_ID: ${{ secrets.LANDINGZONE_A2_SUBSCRIPTION_ID }}
  LANDINGZONE_P1_SUBSCRIPTION_ID: ${{ secrets.LANDINGZONE_P1_SUBSCRIPTION_ID }}
  SANDBOX_SUBSCRIPTION_ID: ${{ secrets.SANDBOX_SUBSCRIPTION_ID }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  HUB_RESOURCE_GROUP: "rg-connectivity-hub"
  HUB_VNET_NAME: "vnet-hub"

jobs:
  validate-prerequisites:
    name: Validate Network Prerequisites
    runs-on: ubuntu-latest
    outputs:
      hub_exists: ${{ steps.hub-info.outputs.hub_exists }}
      management_subscription_set: ${{ steps.setoutputs.outputs.management_subscription_set }}
      identity_subscription_set: ${{ steps.setoutputs.outputs.identity_subscription_set }}
      landingzone_a2_subscription_set: ${{ steps.setoutputs.outputs.landingzone_a2_subscription_set }}
      sandbox_subscription_set: ${{ steps.setoutputs.outputs.sandbox_subscription_set }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify hub network exists
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      - name: Get hub network information
        id: hub-info
        run: |
          HUB_RG="${{ env.HUB_RESOURCE_GROUP }}"
          HUB_VNET="${{ env.HUB_VNET_NAME }}"
          if ! az group show --name "$HUB_RG" &>/dev/null; then
            echo "::warning::Hub resource group $HUB_RG not found. Did you run deploy-connectivity.yml first?"
            echo "hub_exists=false" >> $GITHUB_OUTPUT
            echo "HUB_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          if ! az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" &>/dev/null; then
            echo "::warning::Hub VNet $HUB_VNET not found in $HUB_RG. Did you run deploy-connectivity.yml first?"
            echo "hub_exists=false" >> $GITHUB_OUTPUT
            echo "HUB_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          HUB_VNET_ID=$(az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" --query id -o tsv)
          echo "HUB_VNET_ID=$HUB_VNET_ID" >> $GITHUB_ENV
          HUB_ADDRESS_SPACE=$(az network vnet show --resource-group "$HUB_RG" --name "$HUB_VNET" --query "addressSpace.addressPrefixes[0]" -o tsv)
          echo "HUB_ADDRESS_SPACE=$HUB_ADDRESS_SPACE" >> $GITHUB_ENV
          echo "hub_exists=true" >> $GITHUB_OUTPUT
          echo "HUB_EXISTS=true" >> $GITHUB_ENV

      - name: Set outputs for job-level conditions
        id: setoutputs
        run: |
          echo "management_subscription_set=${{ env.MANAGEMENT_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT
          echo "identity_subscription_set=${{ env.IDENTITY_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT
          echo "landingzone_a2_subscription_set=${{ env.LANDINGZONE_A2_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT
          echo "sandbox_subscription_set=${{ env.SANDBOX_SUBSCRIPTION_ID != '' }}" >> $GITHUB_OUTPUT

  deploy-management-network:
    name: Deploy Management Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.management_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'management') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow for management spoke) ...

  deploy-identity-network:
    name: Deploy Identity Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.identity_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'identity') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow for identity spoke) ...

  deploy-landingzone-a2-network:
    name: Deploy Analytics Landing Zone Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.landingzone_a2_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'landingzone-a2') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (all original steps as in your previous workflow for A2 spoke) ...

  deploy-sandbox-network:
    name: Deploy Sandbox Spoke
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.sandbox_subscription_set == 'true' && !contains(github.event.inputs.skipSpokes, 'sandbox') && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create sandbox network parameters
        run: |
          mkdir -p connectivity/spoke-network/parameters
          cat > connectivity/spoke-network/parameters/sandbox-spoke.parameters.json << EOL
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "spokeName": {
                "value": "sandbox"
              },
              "environment": {
                "value": "${{ env.ENVIRONMENT }}"
              },
              "location": {
                "value": "${{ env.LOCATION }}"
              },
              "addressPrefix": {
                "value": "10.4.0.0/16"
              },
              "subnets": {
                "value": [
                  {
                    "name": "snet-sandbox-default",
                    "properties": {
                      "addressPrefix": "10.4.0.0/24",
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  }
                ]
              },
              "tags": {
                "value": {
                  "environment": "${{ env.ENVIRONMENT }}",
                  "networkType": "spoke",
                  "spokeType": "sandbox"
                }
              }
            }
          }
          EOL

      - name: Login to Azure (Sandbox Subscription)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.SANDBOX_SUBSCRIPTION_ID }}

      - name: Deploy sandbox spoke network
        run: |
          RESOURCE_GROUP="rg-sandbox-network"
          LOCATION="${{ env.LOCATION }}"
          echo "Creating/Verifying resource group $RESOURCE_GROUP..."
          az group create --name "$RESOURCE_GROUP" --location "$LOCATION" --tags environment=${{ env.ENVIRONMENT }} networkType=spoke
          echo "Deploying sandbox spoke network..."
          az deployment group create \
            --name "sandbox-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group "$RESOURCE_GROUP" \
            --template-file connectivity/spoke-network/spoke-network.bicep \
            --parameters @connectivity/spoke-network/parameters/sandbox-spoke.parameters.json
          SANDBOX_VNET_ID=$(az network vnet show \
            --resource-group "$RESOURCE_GROUP" \
            --name "vnet-sandbox" \
            --query id -o tsv)
          echo "Sandbox spoke network deployed: $SANDBOX_VNET_ID"
          echo "SANDBOX_VNET_ID=$SANDBOX_VNET_ID" >> $GITHUB_ENV

      - name: Set up VNet peering to hub
        run: |
          echo "Creating VNet peering from sandbox to hub..."
          cat > connectivity/peering/parameters/sandbox-hub-peering.parameters.json << EOL
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "sourceVnetName": {
                "value": "vnet-sandbox"
              },
              "destinationVnetId": {
                "value": "${{ env.HUB_VNET_ID }}"
              },
              "allowGatewayTransit": {
                "value": false
              },
              "useRemoteGateways": {
                "value": true
              },
              "allowForwardedTraffic": {
                "value": true
              },
              "allowVirtualNetworkAccess": {
                "value": true
              }
            }
          }
          EOL
          az deployment group create \
            --name "sandbox-to-hub-peering-$(date +%Y%m%d%H%M%S)" \
            --resource-group "rg-sandbox-network" \
            --template-file connectivity/peering/vnet-peering.bicep \
            --parameters @connectivity/peering/parameters/sandbox-hub-peering.parameters.json

      - name: Login to connectivity subscription for reverse peering
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      - name: Create hub to sandbox peering
        run: |
          echo "Creating VNet peering from hub to sandbox..."
          cat > connectivity/peering/parameters/hub-sandbox-peering.parameters.json << EOL
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "sourceVnetName": {
                "value": "${{ env.HUB_VNET_NAME }}"
              },
              "destinationVnetId": {
                "value": "${{ env.SANDBOX_VNET_ID }}"
              },
              "allowGatewayTransit": {
                "value": true
              },
              "useRemoteGateways": {
                "value": false
              },
              "allowForwardedTraffic": {
                "value": true
              },
              "allowVirtualNetworkAccess": {
                "value": true
              }
            }
          }
          EOL
          az deployment group create \
            --name "hub-to-sandbox-peering-$(date +%Y%m%d%H%M%S)" \
            --resource-group "${{ env.HUB_RESOURCE_GROUP }}" \
            --template-file connectivity/peering/vnet-peering.bicep \
            --parameters @connectivity/peering/parameters/hub-sandbox-peering.parameters.json

  integrate-dns:
    name: Integrate Private DNS Zones
    needs: [deploy-management-network, deploy-identity-network, deploy-sandbox-network]
    runs-on: ubuntu-latest
    if: needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (original DNS steps; add sandbox as desired for linking DNS zones) ...

  validate-network:
    name: Validate Network Configuration
    needs: [deploy-management-network, deploy-identity-network, deploy-sandbox-network, integrate-dns]
    runs-on: ubuntu-latest
    if: always() && needs.validate-prerequisites.outputs.hub_exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # ... (original validation steps) ...
