# =========================================================
# Enterprise Azure Landing Zone - Connectivity Deployment
# =========================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow implements connectivity resources for an enterprise landing zone with:
# - Hub virtual network in a centralized subscription
# - Properly named subnets for Azure services (AzureBastionSubnet, AzureFirewallSubnet)
# - Private DNS zones for private endpoints
# - Bastion host for secure jumpbox access
#
# COMMON ISSUES AND SOLUTIONS:
# 1. Subnet naming: Azure services require specific subnet names (AzureBastionSubnet, GatewaySubnet)
# 2. Parameter file issues: Always validate parameter files for correct JSON structure
# 3. Missing resources: When no resources appear, check resource group directly, not subscription view
# 4. OIDC authentication: Ensure federation setup is correct in Azure AD and GitHub
#
# ENTERPRISE DEPLOYMENT PATTERNS:
# - Connectivity-Identity-Management separation (CAF/Enterprise Scale model)
# - Hub-spoke network topology with centralized security services
# - DNS private zones for private link integration
# - Advanced security with Azure Firewall and NSGs

name: Deploy Connectivity Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-connectivity-hub
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy-hub-network:
    # PROMPT ENGINEERING GUIDANCE:
    # This job creates the foundation of your enterprise network
    # The hub network connects all spokes and centrally manages:
    # - Security via Azure Firewall/NVA
    # - External connectivity via VPN/ExpressRoute
    # - Shared services like DNS and Bastion
    # 
    # TROUBLESHOOTING STEPS:
    # - Parameter errors: Check if hubNetworkName, addressPrefix match template
    # - Resource name conflicts: Verify resources don't already exist
    # - Subnet configuration: Azure services need specific subnet names/sizes
    name: Deploy Hub Network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # PROMPT ENGINEERING GUIDANCE:
      # OIDC authentication is recommended over service principal secrets
      # This method improves security by using short-lived tokens
      # Federation must be properly configured in Azure AD app registration
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      # PROMPT ENGINEERING GUIDANCE:
      # Virtual network peering enables communication across virtual networks
      # Hub-spoke peering should allow gateway transit from hub to spoke
      # Spoke-to-hub peering should use remote gateways if VPN/ER is in hub
      # Common error: Module references failing due to registry changes
      - name: Fix VNet peering bicep file
        run: |
          cat > ./connectivity/peering/vnet-peering.bicep << 'EOF'
          // Virtual Network Peering Module - Key building block for hub-spoke architecture
          // PROMPT ENGINEERING GUIDANCE:
          // - Use explicit parameter names with descriptions for better documentation
          // - Set appropriate defaults for enterprise networking (security first)
          // - Include output for programmatic referencing from other workflows
          
          @description('Name of the source virtual network')
          param sourceVnetName string

          @description('Resource ID of the destination virtual network')
          param destinationVnetId string

          @description('Name for the peering from source to destination')
          param peeringName string = 'peering-to-${last(split(destinationVnetId, '/'))}'

          @description('Whether to allow gateway transit in the peering')
          param allowGatewayTransit bool = false

          @description('Whether to use remote gateways in the peering')
          param useRemoteGateways bool = false

          @description('Whether to allow forwarded traffic in the peering')
          param allowForwardedTraffic bool = true

          @description('Whether to allow virtual network access in the peering')
          param allowVirtualNetworkAccess bool = true

          // Create VNet peering from source to destination
          resource vnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-04-01' = {
            name: '${sourceVnetName}/${peeringName}'
            properties: {
              allowVirtualNetworkAccess: allowVirtualNetworkAccess
              allowForwardedTraffic: allowForwardedTraffic
              allowGatewayTransit: allowGatewayTransit
              useRemoteGateways: useRemoteGateways
              remoteVirtualNetwork: {
                id: destinationVnetId
              }
            }
          }

          // Output the resource ID of the peering
          output peeringId string = vnetPeering.id
          EOF
          
          echo "Fixed vnet-peering.bicep file created."

      # PROMPT ENGINEERING GUIDANCE:
      # Resource group naming should follow enterprise conventions
      # Always tag resources for governance, billing and automation
      # Consistent location usage simplifies disaster recovery planning
      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} deployedBy=GitHub
      
      # PROMPT ENGINEERING GUIDANCE:
      # Debugging parameter files is critical for deployment success
      # Common issues include:
      # - Invalid JSON format
      # - Mismatched parameter names
      # - Missing required parameters
      # - Template syntax in parameter values
      - name: Debug parameter file
        run: |
          PARAM_FILE="connectivity/hub-network/parameters/hub-network.parameters.json"
          echo "Examining parameter file: $PARAM_FILE"
          
          if [ -f "$PARAM_FILE" ]; then
            echo "Content of $PARAM_FILE:"
            cat "$PARAM_FILE"
          else
            echo "Parameter file $PARAM_FILE not found!"
          fi

      # PROMPT ENGINEERING GUIDANCE:
      # Parameter files should follow ARM template parameter schema
      # Include only parameters needed by the template
      # Use environment-specific values for different environments
      # Location parameter should match resource group location
      - name: Create new parameter file
        run: |
          echo "Creating a new parameter file..."
          
          cat > ./hub-network.parameters.json << 'EOF'
          {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "location": {
                "value": "${{ env.LOCATION }}"
              },
              "hubNetworkName": {
                "value": "vnet-hub"
              },
              "addressPrefix": {
                "value": "10.0.0.0/16"
              },
              "enableDdosProtection": {
                "value": false
              }
            }
          }
          EOF
          
          echo "Created new parameter file:"
          cat ./hub-network.parameters.json
      
      # PROMPT ENGINEERING GUIDANCE:
      # Subnet names for PaaS services must follow Azure conventions:
      # - "AzureBastionSubnet" for Azure Bastion (not "BastionSubnet")
      # - "GatewaySubnet" for VPN/ExpressRoute gateways
      # - "AzureFirewallSubnet" for Azure Firewall
      # - "RouteServerSubnet" for Azure Route Server
      # Incorrect subnet names will cause deployment failures
      - name: Fix hub-network.bicep file
        run: |
          echo "Fixing BastionSubnet to AzureBastionSubnet in hub-network.bicep..."
          
          # Create backup
          cp ./connectivity/hub-network/hub-network.bicep ./connectivity/hub-network/hub-network.bicep.backup
          
          # Replace BastionSubnet with AzureBastionSubnet in the file
          sed -i 's/BastionSubnet/AzureBastionSubnet/g' ./connectivity/hub-network/hub-network.bicep
          
          # Show changes for verification
          echo "Changes made to hub-network.bicep:"
          diff ./connectivity/hub-network/hub-network.bicep.backup ./connectivity/hub-network/hub-network.bicep || true
      
      # PROMPT ENGINEERING GUIDANCE:
      # ARM deployments should:
      # - Use unique deployment names for tracking and troubleshooting
      # - Include complete error handling
      # - Verify deployment success
      # - Use incremental mode (default) to preserve existing resources
      - name: Deploy hub network
        run: |
          echo "Deploying hub network with new parameter file..."
          
          az deployment group create \
            --name "hub-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file connectivity/hub-network/hub-network.bicep \
            --parameters @./hub-network.parameters.json
          
          echo "Hub network deployment completed"

  verify-resources:
    # PROMPT ENGINEERING GUIDANCE:
    # Always verify deployed resources to confirm success
    # Check for specific resource types based on template
    # Validate resource configuration (subnets, settings)
    # Generate reports for documentation and governance
    name: Verify Deployed Resources
    needs: deploy-hub-network
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      # PROMPT ENGINEERING GUIDANCE:
      # Re-authenticate in each job to prevent token expiration
      # Each job runs in a separate VM instance and needs auth
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}
      
      # PROMPT ENGINEERING GUIDANCE:
      # Resource verification should check:
      # - Resource existence
      # - Correct configuration
      # - Correct relationships between resources
      # - Success of dependent services
      # Look for specific Azure errors in deployment logs
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed resources in ${{ env.RESOURCE_GROUP_NAME }}..."
          
          # List all resources in resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for hub VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-hub" &>/dev/null; then
            
            echo "✅ Hub VNet deployed successfully"
            
            # Get subnets in the VNet
            echo "Subnets in Hub VNet:"
            az network vnet subnet list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name "vnet-hub" \
              --query "[].{Name:name, Prefix:addressPrefix}" \
              --output table
              
            # Check for Bastion resource
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.Network/bastionHosts" \
              --query "[].name" -o tsv | grep -q "bastion"; then
              echo "✅ Azure Bastion deployed successfully"
            else
              echo "❌ Azure Bastion not found"
            fi
          else
            echo "❌ Hub VNet not found"
          fi
          
          # Generate summary report
          cat << EOF > $GITHUB_STEP_SUMMARY
          # Connectivity Deployment Results
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          
          ## Deployed Resources
          
          | Resource Type | Count |
          |--------------|-------|
          EOF
          
          # Add resource counts to summary
          RESOURCES=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].type" -o tsv 2>/dev/null | sort | uniq -c || echo "")
          if [ -z "$RESOURCES" ]; then
            echo "| No resources found | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            while read -r line; do
              if [ -n "$line" ]; then
                COUNT=$(echo $line | awk '{print $1}')
                TYPE=$(echo $line | awk '{print $2}')
                echo "| $TYPE | $COUNT |" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "$RESOURCES"
          fi
          
          # PROMPT ENGINEERING GUIDANCE:
          # Always include clear next steps and viewing instructions
          # Reference specific portal paths rather than general guidance
          # Include information about what to expect in the portal
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ## How to View Resources
          
          1. In the Azure portal, navigate to **Resource groups**
          2. Select the resource group **${{ env.RESOURCE_GROUP_NAME }}**
          3. Resources should appear in the content pane
          
          ## Next Steps
          
          After hub network deployment:
          1. Run the configure-enterprise-network.yml workflow to deploy spoke networks
          2. Configure firewall rules for appropriate traffic filtering
          3. Set up Azure Monitor for network monitoring
          4. Implement private endpoints for PaaS services
          
          ## Common Issues
          
          If resources aren't visible:
          - Ensure you're looking in the resource group (not subscription view)
          - Check deployment history in the resource group for errors
          - Verify permissions to the connectivity subscription
          EOF