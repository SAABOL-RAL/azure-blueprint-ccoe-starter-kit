# =========================================================
# Enterprise Azure Landing Zone - Connectivity Deployment
# =========================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow has been updated to:
# 1. Fix the Azure Bastion subnet naming issue
# 2. Modify the hub-network.bicep file to use correct subnet name
# 3. Deploy with the corrected template
# 4. Verify deployed resources

name: Deploy Connectivity Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-connectivity-hub
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy-hub-network:
    name: Deploy Hub Network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      - name: Fix VNet peering bicep file
        run: |
          cat > ./connectivity/peering/vnet-peering.bicep << 'EOF'
          // Virtual Network Peering Module
          @description('Name of the source virtual network')
          param sourceVnetName string

          @description('Resource ID of the destination virtual network')
          param destinationVnetId string

          @description('Name for the peering from source to destination')
          param peeringName string = 'peering-to-${last(split(destinationVnetId, '/'))}'

          @description('Whether to allow gateway transit in the peering')
          param allowGatewayTransit bool = false

          @description('Whether to use remote gateways in the peering')
          param useRemoteGateways bool = false

          @description('Whether to allow forwarded traffic in the peering')
          param allowForwardedTraffic bool = true

          @description('Whether to allow virtual network access in the peering')
          param allowVirtualNetworkAccess bool = true

          // Create VNet peering from source to destination
          resource vnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-04-01' = {
            name: '${sourceVnetName}/${peeringName}'
            properties: {
              allowVirtualNetworkAccess: allowVirtualNetworkAccess
              allowForwardedTraffic: allowForwardedTraffic
              allowGatewayTransit: allowGatewayTransit
              useRemoteGateways: useRemoteGateways
              remoteVirtualNetwork: {
                id: destinationVnetId
              }
            }
          }

          // Output the resource ID of the peering
          output peeringId string = vnetPeering.id
          EOF
          
          echo "Fixed vnet-peering.bicep file created."

      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} deployedBy=GitHub
      
      # CRITICAL FIX: Fix the BastionSubnet name in the template
      - name: Fix hub-network.bicep file
        run: |
          echo "Fixing BastionSubnet to AzureBastionSubnet in hub-network.bicep..."
          
          # Create backup
          cp ./connectivity/hub-network/hub-network.bicep ./connectivity/hub-network/hub-network.bicep.backup
          
          # Replace BastionSubnet with AzureBastionSubnet in the file
          # This handles both subnet definition and references
          sed -i 's/BastionSubnet/AzureBastionSubnet/g' ./connectivity/hub-network/hub-network.bicep
          
          # Show changes for verification
          echo "Changes made to hub-network.bicep:"
          diff ./connectivity/hub-network/hub-network.bicep.backup ./connectivity/hub-network/hub-network.bicep || true
          
          echo "✅ Fixed hub-network.bicep file with correct Bastion subnet name"
      
      # Deploy with the fixed template
      - name: Deploy hub network
        run: |
          echo "Deploying hub network with fixed template..."
          
          # Find parameter file
          PARAM_PATH=""
          PARAM_PATHS=(
            "connectivity/hub-network/parameters/hub-network.parameters.json"
            "connectivity/hub-network/parameters/hub-network-${{ env.ENVIRONMENT }}.parameters.json"
            "connectivity/parameters/hub-network.parameters.json"
          )
          
          for path in "${PARAM_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "Using parameter file: $path"
              PARAM_PATH="$path"
              break
            fi
          done
          
          # Deploy with parameter file if found, or direct parameters
          if [ -n "$PARAM_PATH" ]; then
            echo "Deploying with parameter file: $PARAM_PATH"
            az deployment group create \
              --name "hub-network-$(date +%Y%m%d%H%M%S)" \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file connectivity/hub-network/hub-network.bicep \
              --parameters @$PARAM_PATH
          else
            echo "Using direct parameters"
            az deployment group create \
              --name "hub-network-$(date +%Y%m%d%H%M%S)" \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file connectivity/hub-network/hub-network.bicep \
              --parameters location=${{ env.LOCATION }} \
              --parameters hubNetworkName=vnet-hub \
              --parameters addressPrefix=10.0.0.0/16 \
              --parameters enableDdosProtection=false
          fi

  deploy-dns-zones:
    name: Deploy Private DNS Zones
    needs: deploy-hub-network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}
      
      - name: Deploy private DNS zones
        run: |
          # Check if DNS template exists
          if [ ! -f "connectivity/dns/private-dns.bicep" ]; then
            echo "::warning::private-dns.bicep not found, skipping DNS zone deployment."
            exit 0
          fi
          
          echo "Deploying private DNS zones..."
          
          # Find parameter file
          PARAM_PATH=""
          PARAM_PATHS=(
            "connectivity/dns/parameters/private-dns.parameters.json"
            "connectivity/dns/parameters/private-dns-${{ env.ENVIRONMENT }}.parameters.json"
            "connectivity/parameters/private-dns.parameters.json"
          )
          
          for path in "${PARAM_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "Using parameter file: $path"
              PARAM_PATH="$path"
              break
            fi
          done
          
          # Deploy with parameter file if found
          if [ -n "$PARAM_PATH" ]; then
            az deployment group create \
              --name "private-dns-$(date +%Y%m%d%H%M%S)" \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file connectivity/dns/private-dns.bicep \
              --parameters @$PARAM_PATH
          else
            az deployment group create \
              --name "private-dns-$(date +%Y%m%d%H%M%S)" \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file connectivity/dns/private-dns.bicep
          fi

  verify-resources:
    name: Verify Deployed Resources
    needs: [deploy-hub-network, deploy-dns-zones]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}
      
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed resources in ${{ env.RESOURCE_GROUP_NAME }}..."
          
          # List all resources in resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for hub VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-hub" &>/dev/null; then
            
            echo "✅ Hub VNet deployed successfully"
            
            # Get subnets in the VNet
            echo "Subnets in Hub VNet:"
            az network vnet subnet list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name "vnet-hub" \
              --query "[].{Name:name, Prefix:addressPrefix}" \
              --output table
              
            # Check for Bastion resource
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.Network/bastionHosts" \
              --query "[].name" -o tsv | grep -q "bastion"; then
              echo "✅ Azure Bastion deployed successfully"
            else
              echo "❌ Azure Bastion not found"
            fi
          else
            echo "❌ Hub VNet not found"
          fi
          
          # Generate summary report
          cat << EOF > $GITHUB_STEP_SUMMARY
          # Connectivity Deployment Results
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          
          ## Deployed Resources
          
          | Resource Type | Count |
          |--------------|-------|
          EOF
          
          # Add resource counts to summary
          RESOURCES=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].type" -o tsv 2>/dev/null | sort | uniq -c || echo "")
          if [ -z "$RESOURCES" ]; then
            echo "| No resources found | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            while read -r line; do
              if [ -n "$line" ]; then
                COUNT=$(echo $line | awk '{print $1}')
                TYPE=$(echo $line | awk '{print $2}')
                echo "| $TYPE | $COUNT |" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "$RESOURCES"
          fi
          
          # Add viewing instructions
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ## Viewing Instructions
          
          1. In Azure portal, go to "Resource groups"
          2. Select the resource group "${{ env.RESOURCE_GROUP_NAME }}"
          3. Your hub network resources will be visible in this resource group
          
          ## Next Steps
          
          After this deployment, you can:
          1. Run the configure-enterprise-network.yml workflow to set up spoke networks
          2. Configure Azure Firewall policies
          3. Set up private DNS zone links for spoke VNets
          EOF