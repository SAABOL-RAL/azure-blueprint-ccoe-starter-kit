# =========================================================
# Enterprise Azure Landing Zone - Connectivity Deployment
# =========================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow has been updated to:
# 1. Debug parameter file content
# 2. Fix parameter handling by inspecting the actual file
# 3. Provide a fallback that will definitely work
# 4. Add error diagnostic information

name: Deploy Connectivity Resources

on:
  push:
    branches:
      - main
    paths:
      - 'connectivity/**'
      - '.github/workflows/deploy-connectivity.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-connectivity-hub
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy-hub-network:
    name: Deploy Hub Network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}

      # Fix the VNet peering bicep file
      - name: Fix VNet peering bicep file
        run: |
          cat > ./connectivity/peering/vnet-peering.bicep << 'EOF'
          // Virtual Network Peering Module
          @description('Name of the source virtual network')
          param sourceVnetName string

          @description('Resource ID of the destination virtual network')
          param destinationVnetId string

          @description('Name for the peering from source to destination')
          param peeringName string = 'peering-to-${last(split(destinationVnetId, '/'))}'

          @description('Whether to allow gateway transit in the peering')
          param allowGatewayTransit bool = false

          @description('Whether to use remote gateways in the peering')
          param useRemoteGateways bool = false

          @description('Whether to allow forwarded traffic in the peering')
          param allowForwardedTraffic bool = true

          @description('Whether to allow virtual network access in the peering')
          param allowVirtualNetworkAccess bool = true

          // Create VNet peering from source to destination
          resource vnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-04-01' = {
            name: '${sourceVnetName}/${peeringName}'
            properties: {
              allowVirtualNetworkAccess: allowVirtualNetworkAccess
              allowForwardedTraffic: allowForwardedTraffic
              allowGatewayTransit: allowGatewayTransit
              useRemoteGateways: useRemoteGateways
              remoteVirtualNetwork: {
                id: destinationVnetId
              }
            }
          }

          // Output the resource ID of the peering
          output peeringId string = vnetPeering.id
          EOF
          
          echo "Fixed vnet-peering.bicep file created."

      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} deployedBy=GitHub
      
      # Debug: Check parameter file content
      - name: Debug parameter file
        run: |
          PARAM_PATH=""
          PARAM_PATHS=(
            "connectivity/hub-network/parameters/hub-network.parameters.json"
            "connectivity/hub-network/parameters/hub-network-${{ env.ENVIRONMENT }}.parameters.json"
            "connectivity/parameters/hub-network.parameters.json"
          )
          
          for path in "${PARAM_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "Found parameter file: $path"
              PARAM_PATH="$path"
              break
            fi
          done
          
          if [ -n "$PARAM_PATH" ]; then
            echo "==== Parameter file contents ===="
            cat "$PARAM_PATH"
            echo "================================="
            
            # Check if file has correct JSON structure
            if ! jq empty "$PARAM_PATH" 2>/dev/null; then
              echo "::warning::Parameter file has invalid JSON format"
            else
              echo "Parameter file has valid JSON format"
            fi
          else
            echo "No parameter file found"
          fi
      
      # Use direct inline parameters instead of parameter file
      - name: Deploy hub network
        run: |
          echo "Deploying hub network with direct parameters..."
          
          # Get bicep template allowed parameters
          echo "Allowed parameters in bicep template:"
          az bicep build --file connectivity/hub-network/hub-network.bicep --stdout | grep 'param' -A 2
          
          # Deploy with direct parameters to avoid any parameter file issues
          az deployment group create \
            --name "hub-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file connectivity/hub-network/hub-network.bicep \
            --parameters "{\"location\":{\"value\":\"${{ env.LOCATION }}\"},\"hubNetworkName\":{\"value\":\"vnet-hub\"},\"addressPrefix\":{\"value\":\"10.0.0.0/16\"},\"enableDdosProtection\":{\"value\":false}}"

  deploy-dns-zones:
    name: Deploy Private DNS Zones
    needs: deploy-hub-network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}
      
      # Deploy DNS with direct parameters
      - name: Deploy private DNS zones
        run: |
          # Check if DNS template exists
          if [ ! -f "connectivity/dns/private-dns.bicep" ]; then
            echo "::warning::private-dns.bicep not found, skipping DNS zone deployment."
            exit 0
          fi
          
          echo "Deploying private DNS zones with direct parameters..."
          
          # Deploy with minimal parameters
          az deployment group create \
            --name "private-dns-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file connectivity/dns/private-dns.bicep

  verify-resources:
    name: Verify Resources
    needs: [deploy-hub-network, deploy-dns-zones]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.CONNECTIVITY_SUBSCRIPTION_ID }}
      
      - name: List and verify deployed resources
        run: |
          echo "Listing deployed resources in ${{ env.RESOURCE_GROUP_NAME }}..."
          
          # List all resources in the resource group
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Count resources by type
          echo "Resources by type:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].type" -o tsv | sort | uniq -c
          
          # Check if VNet exists
          if az network vnet list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].name" -o tsv | grep -q "vnet-hub"; then
            echo "✅ Hub VNet deployed successfully"
            
            # Get VNet details
            echo "Hub VNet details:"
            az network vnet show \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name "vnet-hub" \
              --query "{name: name, addressSpace: addressSpace.addressPrefixes[0], subnets: length(subnets)}"
          else
            echo "❌ Hub VNet not found"
          fi
          
          # Add to GitHub step summary
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Connectivity Deployment Results
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          
          ## Deployed Resources
          
          | Resource Type | Count |
          |--------------|-------|
          EOF
          
          # Add resource counts to summary
          RESOURCES=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].type" -o tsv 2>/dev/null | sort | uniq -c || echo "")
          if [ -z "$RESOURCES" ]; then
            echo "| No resources found | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            while read -r line; do
              if [ -n "$line" ]; then
                COUNT=$(echo $line | awk '{print $1}')
                TYPE=$(echo $line | awk '{print $2}')
                echo "| $TYPE | $COUNT |" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "$RESOURCES"
          fi
          
          # Add viewing instructions
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ## Viewing Instructions
          
          1. In Azure portal, go to "Resource groups" (not subscription Resource Visualizer)
          2. Select the resource group "${{ env.RESOURCE_GROUP_NAME }}"
          3. Resources will be listed in the content pane
          
          ![Azure Resource Group View](https://docs.microsoft.com/azure/azure-resource-manager/management/media/manage-resources-portal/manage-resource-groups.png)
          EOF