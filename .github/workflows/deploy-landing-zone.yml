# ==========================================================================
# Enterprise Azure Landing Zone - Deployment Workflow
# ==========================================================================
# Last Updated: 2025-06-09 23:11:55 UTC
# Author: GEP-V
#
# PROMPT ENGINEERING GUIDANCE:
# This workflow handles deployment of Azure landing zone components with:
# - Policy enforcement for resource tagging
# - Centralized logging with Log Analytics
# - Management networking infrastructure
# - Diagnostic settings for operational monitoring
#
# BEST PRACTICES IMPLEMENTED:
# 1. Proper parameter handling for policy assignments
# 2. Local template creation to avoid external dependencies
# 3. Resource ID capturing for cross-resource configuration
# 4. Detailed logging and error handling
# 5. Conditional deployment based on workflow inputs

name: Deploy Azure Landing Zone

on:
  push:
    branches:
      - main
    paths:
      - 'landing-zone/**'
      - '.github/workflows/deploy-landing-zone.yml'
  
  workflow_dispatch:
    inputs:
      deploymentType:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - policies
          - diagnostics
          - networking

# ==========================================================================
# PERMISSIONS
# ==========================================================================
permissions:
  id-token: write  # Required for Azure OIDC authentication
  contents: read   # Required to read repo files
  actions: write   # Required for artifact upload

# ==========================================================================
# ENVIRONMENT VARIABLES
# ==========================================================================
env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-management
  LOCATION: eastus2
  DEPLOYMENT_TIMESTAMP: "2025-06-09 23:11:55"
  DEPLOYMENT_USER: "GEP-V"
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  MAX_RETRY_ATTEMPTS: 3

jobs:
  deploy-management:
    name: Deploy Management Resources
    runs-on: ubuntu-latest
    outputs:
      deploymentStatus: ${{ steps.deployment_status.outputs.status }}
      resourceGroupId: ${{ steps.create_rg.outputs.resourceGroupId }}
    
    steps:
      # ==========================================================================
      # SETUP AND AUTHENTICATION
      # ==========================================================================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Azure CLI extensions
        run: |
          echo "Installing required Azure CLI extensions..."
          az extension add --name resource-graph --upgrade --yes || true
          az extension add --name log-analytics --upgrade --yes || true
          az extension add --name azure-devops --upgrade --yes || true

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}

      - name: Create Management Resource Group
        id: create_rg
        run: |
          echo "Creating management resource group..."
          RG_RESULT=$(az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
          
          if [ $? -eq 0 ]; then
            echo "Resource group created successfully"
            RG_ID=$(echo "$RG_RESULT" | jq -r '.id')
            echo "resourceGroupId=$RG_ID" >> $GITHUB_OUTPUT
            echo "Created resource group with ID: $RG_ID"
          else
            echo "ERROR: Failed to create resource group"
            exit 1
          fi

      # ==========================================================================
      # POLICY ASSIGNMENT DEPLOYMENT
      # ==========================================================================
      - name: Deploy Policy Using ARM Template
        id: deploy_policy
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Deploying policy using ARM template..."
          
          # Create a clean policy template file without comments
          cat > ./policy-clean.json << 'EOL'
          {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "policyName": {
                "type": "string",
                "defaultValue": "enforce-tag-policy",
                "metadata": {
                  "description": "Name of the policy assignment"
                }
              },
              "tagName": {
                "type": "string",
                "defaultValue": "Environment",
                "metadata": {
                  "description": "Name of the tag to enforce"
                }
              },
              "tagValue": {
                "type": "string",
                "defaultValue": "Production",
                "metadata": {
                  "description": "Value of the tag to enforce"
                }
              },
              "subscriptionId": {
                "type": "string",
                "defaultValue": "[subscription().subscriptionId]",
                "metadata": {
                  "description": "Subscription ID for policy scope"
                }
              },
              "resourceGroupName": {
                "type": "string",
                "defaultValue": "[resourceGroup().name]",
                "metadata": {
                  "description": "Resource group name for policy scope"
                }
              }
            },
            "resources": [
              {
                "type": "Microsoft.Authorization/policyAssignments",
                "apiVersion": "2022-06-01",
                "name": "[parameters('policyName')]",
                "properties": {
                  "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
                  "parameters": {
                    "tagName": {
                      "value": "[parameters('tagName')]"
                    },
                    "tagValue": {
                      "value": "[parameters('tagValue')]"
                    }
                  },
                  "description": "[concat('Enforces the presence of a ', parameters('tagName'), ' tag with value ''', parameters('tagValue'), ''' on all resources')]",
                  "displayName": "[concat('Require ', parameters('tagName'), ' Tag on All Resources')]",
                  "enforcementMode": "Default"
                }
              }
            ],
            "outputs": {
              "policyAssignmentId": {
                "type": "string",
                "value": "[resourceId('Microsoft.Authorization/policyAssignments', parameters('policyName'))]"
              }
            }
          }
          EOL
          
          # Deploy policy assignment with retry logic
          MAX_ATTEMPTS=${{ env.MAX_RETRY_ATTEMPTS }}
          ATTEMPT=1
          SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" != "true" ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to deploy policy assignment..."
            
            POLICY_RESULT=$(az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name policy-${{ github.run_id }}-$ATTEMPT \
              --template-file ./policy-clean.json \
              --parameters tagName=Environment \
                           tagValue=Production \
                           resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} \
              --verbose 2>&1)
            
            if [ $? -eq 0 ]; then
              echo "Policy assignment deployed successfully"
              POLICY_ID=$(echo "$POLICY_RESULT" | grep -o '"policyAssignmentId": *"[^"]*"' | cut -d'"' -f4)
              echo "POLICY_ID=$POLICY_ID" >> $GITHUB_ENV
              echo "Deployed policy with ID: $POLICY_ID"
              SUCCESS=true
              break
            else
              echo "ERROR: Policy deployment attempt $ATTEMPT failed"
              echo "$POLICY_RESULT"
              ATTEMPT=$((ATTEMPT + 1))
              if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
                echo "Waiting 30 seconds before retrying..."
                sleep 30
              fi
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "ERROR: All policy deployment attempts failed"
            exit 1
          fi

      # ==========================================================================
      # LOG ANALYTICS WORKSPACE DEPLOYMENT
      # ==========================================================================
      - name: Deploy Log Analytics Workspace
        id: log_analytics
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Deploying Log Analytics workspace..."
          
          # Create a temporary Log Analytics template file
          cat > ./log-analytics.json << 'EOL'
          {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "workspaceName": {
                "type": "string",
                "defaultValue": "log-analytics-mgmt"
              },
              "location": {
                "type": "string",
                "defaultValue": "[resourceGroup().location]"
              },
              "sku": {
                "type": "string",
                "defaultValue": "PerGB2018",
                "allowedValues": [
                  "PerGB2018",
                  "Free",
                  "Standalone",
                  "PerNode",
                  "Standard",
                  "Premium"
                ]
              },
              "retentionInDays": {
                "type": "int",
                "defaultValue": 30
              }
            },
            "resources": [
              {
                "type": "Microsoft.OperationalInsights/workspaces",
                "apiVersion": "2022-10-01",
                "name": "[parameters('workspaceName')]",
                "location": "[parameters('location')]",
                "properties": {
                  "sku": {
                    "name": "[parameters('sku')]"
                  },
                  "retentionInDays": "[parameters('retentionInDays')]",
                  "features": {
                    "enableLogAccessUsingOnlyResourcePermissions": true
                  }
                },
                "tags": {
                  "Environment": "Production",
                  "DeployedBy": "GEP-V",
                  "DeployedAt": "2025-06-09 23:11:55"
                }
              }
            ],
            "outputs": {
              "workspaceId": {
                "type": "string",
                "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              },
              "workspaceName": {
                "type": "string",
                "value": "[parameters('workspaceName')]"
              }
            }
          }
          EOL
          
          # Deploy Log Analytics workspace with retry logic
          MAX_ATTEMPTS=${{ env.MAX_RETRY_ATTEMPTS }}
          ATTEMPT=1
          SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" != "true" ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to deploy Log Analytics workspace..."
            
            WORKSPACE_RESULT=$(az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name workspace-${{ github.run_id }}-$ATTEMPT \
              --template-file ./log-analytics.json \
              --parameters workspaceName=log-analytics-mgmt \
                           location=${{ env.LOCATION }} \
                           retentionInDays=30 \
                           sku=PerGB2018 \
              --verbose 2>&1)
            
            if [ $? -eq 0 ]; then
              echo "Log Analytics workspace deployed successfully"
              WORKSPACE_ID=$(echo "$WORKSPACE_RESULT" | grep -o '"workspaceId": *"[^"]*"' | cut -d'"' -f4)
              echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
              echo "Deployed workspace with ID: $WORKSPACE_ID"
              SUCCESS=true
              break
            else
              echo "ERROR: Log Analytics deployment attempt $ATTEMPT failed"
              echo "$WORKSPACE_RESULT"
              ATTEMPT=$((ATTEMPT + 1))
              if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
                echo "Waiting 30 seconds before retrying..."
                sleep 30
              fi
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "All Log Analytics deployment attempts failed, attempting direct retrieval..."
            WORKSPACE_ID=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type Microsoft.OperationalInsights/workspaces \
              --query "[0].id" -o tsv)
            
            if [ -n "$WORKSPACE_ID" ]; then
              echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
              echo "Retrieved workspace ID: $WORKSPACE_ID"
              SUCCESS=true
            else
              echo "ERROR: Unable to deploy or find Log Analytics workspace"
              exit 1
            fi
          fi

      # ==========================================================================
      # NETWORKING DEPLOYMENT
      # ==========================================================================
      - name: Create Management VNet
        id: create_vnet
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Creating management VNet..."
          
          # Check if VNet already exists
          EXISTING_VNET=$(az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[?name=='vnet-management'].id" -o tsv)
          
          if [ -n "$EXISTING_VNET" ]; then
            echo "VNet already exists with ID: $EXISTING_VNET"
            echo "VNET_ID=$EXISTING_VNET" >> $GITHUB_ENV
          else
            # Create VNet with Azure CLI
            VNET_RESULT=$(az network vnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name vnet-management \
              --address-prefix 10.0.0.0/16 \
              --subnet-name subnet-management \
              --subnet-prefix 10.0.0.0/24 \
              --location ${{ env.LOCATION }} \
              --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
            
            # Store VNet ID for diagnostics configuration
            VNET_ID=$(az network vnet show \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name vnet-management \
              --query id -o tsv)
            
            echo "VNET_ID=$VNET_ID" >> $GITHUB_ENV
            echo "VNet created with ID: $VNET_ID"
          fi
          
          # Check if services subnet exists, add if missing
          EXISTING_SUBNET=$(az network vnet subnet list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --vnet-name vnet-management \
            --query "[?name=='subnet-services'].id" -o tsv)
          
          if [ -n "$EXISTING_SUBNET" ]; then
            echo "Services subnet already exists with ID: $EXISTING_SUBNET"
          else
            echo "Adding management services subnet..."
            az network vnet subnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name vnet-management \
              --name subnet-services \
              --address-prefix 10.0.1.0/24
            
            echo "Services subnet created"
          fi
          
          echo "VNet configuration completed"

      # ==========================================================================
      # DIAGNOSTICS CONFIGURATION
      # ==========================================================================
      - name: Configure Diagnostics Settings
        id: configure_diagnostics
        if: ${{ (github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '') && env.WORKSPACE_ID != '' && env.VNET_ID != '' }}
        run: |
          echo "Configuring diagnostics settings..."
          
          # Check if both required resources exist
          if [ -n "$VNET_ID" ] && [ -n "$WORKSPACE_ID" ]; then
            # Check if diagnostics already configured
            EXISTING_DIAG=$(az monitor diagnostic-settings list --resource "$VNET_ID" --query "[?name=='diag-to-log-analytics'].id" -o tsv)
            
            if [ -n "$EXISTING_DIAG" ]; then
              echo "Diagnostics settings already exist for VNet"
            else
              # Configure diagnostics settings for VNet
              DIAG_RESULT=$(az monitor diagnostic-settings create \
                --name "diag-to-log-analytics" \
                --resource "$VNET_ID" \
                --workspace "$WORKSPACE_ID" \
                --logs '[{"category":"VMProtectionAlerts","enabled":true}]' \
                --metrics '[{"category":"AllMetrics","enabled":true}]')
              
              if [ $? -eq 0 ]; then
                echo "Diagnostics settings configured successfully for VNet"
                echo "$DIAG_RESULT" | jq .
              else
                echo "WARNING: Failed to configure diagnostics settings"
                echo "$DIAG_RESULT" | jq .
              fi
            fi
          else
            echo "WARNING: Unable to configure diagnostics - missing VNet ID or Workspace ID"
            echo "VNet ID: $VNET_ID"
            echo "Workspace ID: $WORKSPACE_ID"
          fi

      # ==========================================================================
      # VALIDATION AND TESTING
      # ==========================================================================
      - name: Validate Deployed Resources
        id: validate_resources
        run: |
          echo "Validating deployed resources..."
          
          # Check resource group
          RG_CHECK=$(az group show --name ${{ env.RESOURCE_GROUP_NAME }} --query id -o tsv)
          if [ -n "$RG_CHECK" ]; then
            echo "✅ Resource group validation passed"
          else
            echo "❌ Resource group validation failed"
            exit 1
          fi
          
          # Check policy assignment if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "policies" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            POLICY_CHECK=$(az policy assignment list --scope "/subscriptions/${{ env.MANAGEMENT_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" --query "[?name=='enforce-tag-policy'].id" -o tsv)
            if [ -n "$POLICY_CHECK" ]; then
              echo "✅ Policy assignment validation passed"
            else
              echo "❌ Policy assignment validation failed"
              exit 1
            fi
          fi
          
          # Check Log Analytics workspace if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "diagnostics" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            WORKSPACE_CHECK=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type Microsoft.OperationalInsights/workspaces --query "[0].id" -o tsv)
            if [ -n "$WORKSPACE_CHECK" ]; then
              echo "✅ Log Analytics workspace validation passed"
            else
              echo "❌ Log Analytics workspace validation failed"
              exit 1
            fi
          fi
          
          # Check VNet if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "networking" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            VNET_CHECK=$(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name vnet-management --query id -o tsv)
            if [ -n "$VNET_CHECK" ]; then
              echo "✅ VNet validation passed"
              
              # Check subnet count
              SUBNET_COUNT=$(az network vnet subnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --vnet-name vnet-management --query "length(@)" -o tsv)
              if [ "$SUBNET_COUNT" -ge 2 ]; then
                echo "✅ Subnet validation passed ($SUBNET_COUNT subnets found)"
              else
                echo "❌ Subnet validation failed (expected at least 2 subnets, found $SUBNET_COUNT)"
                exit 1
              fi
            else
              echo "❌ VNet validation failed"
              exit 1
            fi
          fi
          
          echo "All validation checks passed!"

      # ==========================================================================
      # DEPLOYMENT SUMMARY
      # ==========================================================================
      - name: Create Deployment Summary
        id: deployment_summary
        run: |
          echo "Creating deployment summary..."
          
          # Create JSON deployment summary
          cat > ./deployment-summary.json << EOL
          {
            "deploymentId": "${{ github.run_id }}",
            "timestamp": "${{ env.DEPLOYMENT_TIMESTAMP }}",
            "deployedBy": "${{ env.DEPLOYMENT_USER }}",
            "environment": {
              "resourceGroup": "${{ env.RESOURCE_GROUP_NAME }}",
              "location": "${{ env.LOCATION }}",
              "subscription": "${{ env.MANAGEMENT_SUBSCRIPTION_ID }}"
            },
            "components": {
              "policy": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' }},
                "name": "enforce-tag-policy",
                "id": "${{ env.POLICY_ID || 'not-deployed' }}"
              },
              "logAnalytics": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' }},
                "name": "log-analytics-mgmt",
                "id": "${{ env.WORKSPACE_ID || 'not-deployed' }}"
              },
              "networking": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' }},
                "name": "vnet-management",
                "id": "${{ env.VNET_ID || 'not-deployed' }}"
              }
            },
            "repository": {
              "name": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "workflow": "${{ github.workflow }}",
              "runUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOL
          
          # Create markdown summary
          cat > ./deployment-summary.md << EOL
          # Azure Landing Zone Deployment Summary
          
          ## Deployment Information
          - **Deployment ID**: ${{ github.run_id }}
          - **Timestamp**: ${{ env.DEPLOYMENT_TIMESTAMP }}
          - **Deployed By**: ${{ env.DEPLOYMENT_USER }}
          - **Workflow**: ${{ github.workflow }}
          
          ## Environment
          - **Resource Group**: ${{ env.RESOURCE_GROUP_NAME }}
          - **Location**: ${{ env.LOCATION }}
          - **Subscription**: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          
          ## Components Deployed
          
          | Component | Status | Name | Resource ID |
          |-----------|--------|------|------------|
          | Policy | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | enforce-tag-policy | ${{ env.POLICY_ID || 'N/A' }} |
          | Log Analytics | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | log-analytics-mgmt | ${{ env.WORKSPACE_ID || 'N/A' }} |
          | Networking | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | vnet-management | ${{ env.VNET_ID || 'N/A' }} |
          
          ## Resource List
          \`\`\`
          $(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table)
          \`\`\`
          
          ## Next Steps
          1. Configure additional security settings
          2. Set up monitoring alerts
          3. Connect to other Azure services
          
          [View Run Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOL
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Summary files created"
          
          # Print text summary
          echo "===================================================="
          echo "DEPLOYMENT SUMMARY: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Deployed by: ${{ env.DEPLOYMENT_USER }}"
          echo "===================================================="
          echo "Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "Location: ${{ env.LOCATION }}"
          echo ""
          
          echo "Resources deployed:"
          az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "Policy Assignments:"
          az policy assignment list --scope "/subscriptions/${{ env.MANAGEMENT_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" -o table
          
          echo ""
          echo "Network Configuration:"
          az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          echo "Subnets:"
          az network vnet subnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --vnet-name vnet-management -o table
          
          echo ""
          echo "Log Analytics Workspace:"
          az monitor log-analytics workspace list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "Deployment completed successfully at ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "===================================================="

      # ==========================================================================
      # ARTIFACT UPLOADS - UPDATED TO V4
      # ==========================================================================
      - name: Upload Deployment Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: |
            ./deployment-summary.json
            ./deployment-summary.md
            ./policy-clean.json
            ./log-analytics.json
          retention-days: 90

  # ==========================================================================
  # NOTIFICATION JOB
  # ==========================================================================
  notify:
    name: Send Deployment Notification
    needs: deploy-management
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set notification status
        id: set_status
        run: |
          if [[ "${{ needs.deploy-management.outputs.deploymentStatus }}" == "success" ]]; then
            echo "STATUS=✅ Successful" >> $GITHUB_OUTPUT
          else
            echo "STATUS=❌ Failed" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: ./artifacts

      - name: Prepare notification
        run: |
          echo "Azure Landing Zone Deployment ${{ steps.set_status.outputs.STATUS }}" > ./notification.txt
          echo "" >> ./notification.txt
          echo "Deployment ID: ${{ github.run_id }}" >> ./notification.txt
          echo "Timestamp: ${{ env.DEPLOYMENT_TIMESTAMP }}" >> ./notification.txt
          echo "Repository: ${{ github.repository }}" >> ./notification.txt
          echo "Workflow: ${{ github.workflow }}" >> ./notification.txt
          echo "" >> ./notification.txt
          echo "Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ./notification.txt
          
          if [[ -n "${{ env.NOTIFICATION_EMAIL }}" ]]; then
            echo "Notification would be sent to ${{ env.NOTIFICATION_EMAIL }}"
            cat ./notification.txt
          else
            echo "No notification email configured"
          fi