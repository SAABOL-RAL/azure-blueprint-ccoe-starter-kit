# ==========================================================================
# Enterprise Azure Landing Zone - Deployment Workflow
# ==========================================================================
# Last Updated: 2025-06-10 12:20:49 UTC
# Author: GEP-V
#
# PROMPT ENGINEERING GUIDANCE:
# This workflow handles deployment of Azure landing zone components with:
# - Policy enforcement for resource tagging
# - Centralized logging with Log Analytics
# - Management networking infrastructure
# - Diagnostic settings for operational monitoring
#
# BEST PRACTICES IMPLEMENTED:
# 1. Resource provider registration before deployment
# 2. Simple file-based approach for policy assignments
# 3. Direct commands to avoid external dependencies
# 4. Resource ID capturing for cross-resource configuration
# 5. Detailed logging and error handling

name: Deploy Azure Landing Zone

on:
  push:
    branches:
      - main
    paths:
      - 'landing-zone/**'
      - '.github/workflows/deploy-landing-zone.yml'
  
  workflow_dispatch:
    inputs:
      deploymentType:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - policies
          - diagnostics
          - networking

# ==========================================================================
# PERMISSIONS
# ==========================================================================
permissions:
  id-token: write  # Required for Azure OIDC authentication
  contents: read   # Required to read repo files
  actions: write   # Required for artifact upload

# ==========================================================================
# ENVIRONMENT VARIABLES
# ==========================================================================
env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-management
  LOCATION: eastus2
  DEPLOYMENT_TIMESTAMP: "2025-06-10 12:20:49"
  DEPLOYMENT_USER: "GEP-V"
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  MAX_RETRY_ATTEMPTS: 3

jobs:
  deploy-management:
    name: Deploy Management Resources
    runs-on: ubuntu-latest
    outputs:
      deploymentStatus: ${{ steps.validate_resources.outputs.status }}
      resourceGroupId: ${{ steps.create_rg.outputs.resourceGroupId }}
    
    steps:
      # ==========================================================================
      # SETUP AND AUTHENTICATION
      # ==========================================================================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Azure CLI extensions
        run: |
          echo "Installing required Azure CLI extensions..."
          az extension add --name resource-graph --upgrade --yes || true
          az extension add --name log-analytics --upgrade --yes || true
          az extension add --name azure-devops --upgrade --yes || true

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}

      # ==========================================================================
      # RESOURCE PROVIDER REGISTRATION
      # ==========================================================================
      - name: Register Required Azure Resource Providers
        id: register_providers
        run: |
          echo "Registering required Azure resource providers..."
          
          # List of providers required for the landing zone
          PROVIDERS=(
            "Microsoft.Insights"
            "Microsoft.OperationalInsights"
            "Microsoft.Network"
            "Microsoft.Storage"
            "Microsoft.Compute"
            "Microsoft.Authorization"
            "Microsoft.Resources"
            "Microsoft.PolicyInsights"
          )
          
          # Register each provider
          for PROVIDER in "${PROVIDERS[@]}"
          do
            echo "Registering provider: $PROVIDER"
            az provider register --namespace $PROVIDER
          done
          
          # Check Microsoft.Insights specifically
          echo "Checking Microsoft.Insights registration status..."
          INSIGHTS_STATUS=$(az provider show --namespace Microsoft.Insights --query "registrationState" -o tsv)
          echo "Microsoft.Insights status: $INSIGHTS_STATUS"
          
          if [ "$INSIGHTS_STATUS" != "Registered" ]; then
            echo "Microsoft.Insights is not yet fully registered. This is normal and will complete in the background."
            echo "We'll proceed with the deployment, but diagnostics configuration might need to be run again later."
          fi
          
          echo "providersRegistered=true" >> $GITHUB_OUTPUT
          echo "insightsStatus=$INSIGHTS_STATUS" >> $GITHUB_ENV

      - name: Create Management Resource Group
        id: create_rg
        run: |
          echo "Creating management resource group..."
          RG_RESULT=$(az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
          
          if [ $? -eq 0 ]; then
            echo "Resource group created successfully"
            RG_ID=$(echo "$RG_RESULT" | jq -r '.id')
            echo "resourceGroupId=$RG_ID" >> $GITHUB_OUTPUT
            echo "Created resource group with ID: $RG_ID"
          else
            echo "ERROR: Failed to create resource group"
            exit 1
          fi

      # ==========================================================================
      # POLICY ASSIGNMENT DEPLOYMENT - SIMPLIFIED FILE APPROACH
      # ==========================================================================
      - name: Deploy Policy Using Simplified File Approach
        id: deploy_policy
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Starting policy deployment using simplified file approach..."
          
          # Set basic variables
          SUBSCRIPTION_ID="${{ env.MANAGEMENT_SUBSCRIPTION_ID }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP_NAME }}"
          SCOPE="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP"
          
          echo "==== POLICY ASSIGNMENT STEP ===="
          echo "Created: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Author: ${{ env.DEPLOYMENT_USER }}"
          echo "Subscription: $SUBSCRIPTION_ID"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Scope: $SCOPE"
          echo "============================"
          
          # Delete any existing policy assignment
          echo "Removing existing policy assignment (if any)..."
          az policy assignment delete --name enforce-tag-policy --scope $SCOPE 2>/dev/null || true
          
          # Create a parameters file with the simplest possible format
          echo '{"tagName":{"value":"Environment"},"tagValue":{"value":"Production"}}' > policy-params.json
          echo "Parameter file content:"
          cat policy-params.json
          
          # Assign the policy using the parameter file
          echo "Assigning policy with parameter file..."
          POLICY_RESULT=$(az policy assignment create \
            --name enforce-tag-policy \
            --display-name "Require Environment Tag" \
            --description "Enforces Environment tag on all resources" \
            --policy 1e30110a-5ceb-460c-a204-c1c3969c6d62 \
            --params @policy-params.json \
            --scope $SCOPE \
            --enforcement-mode Default)
          
          if [ $? -eq 0 ]; then
            echo "Policy assignment successful!"
            echo "$POLICY_RESULT" | jq .
            POLICY_ID=$(echo "$POLICY_RESULT" | jq -r '.id')
            echo "POLICY_ID=$POLICY_ID" >> $GITHUB_ENV
          else
            echo "Policy assignment failed!"
            echo "$POLICY_RESULT"
            exit 1
          fi
          
          # Verify policy assignment
          echo "Verifying policy assignment..."
          az policy assignment show --name enforce-tag-policy --scope $SCOPE

      # ==========================================================================
      # LOG ANALYTICS WORKSPACE DEPLOYMENT - USING DIRECT COMMAND
      # ==========================================================================
      - name: Deploy Log Analytics Workspace Using Direct Command
        id: log_analytics
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Deploying Log Analytics workspace using direct command..."
          
          # Define workspace variables
          WORKSPACE_NAME="log-analytics-mgmt"
          SKU="PerGB2018"
          RETENTION_DAYS=30
          
          # Check if workspace already exists
          echo "Checking if workspace already exists..."
          EXISTING_WORKSPACE=$(az monitor log-analytics workspace list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[?name=='$WORKSPACE_NAME'].id" -o tsv)
          
          if [ -n "$EXISTING_WORKSPACE" ]; then
            echo "Workspace already exists with ID: $EXISTING_WORKSPACE"
            echo "WORKSPACE_ID=$EXISTING_WORKSPACE" >> $GITHUB_ENV
            echo "status=exists" >> $GITHUB_OUTPUT
          else
            # Create workspace directly
            echo "Creating Log Analytics workspace directly..."
            WORKSPACE_RESULT=$(az monitor log-analytics workspace create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --workspace-name $WORKSPACE_NAME \
              --location ${{ env.LOCATION }} \
              --sku $SKU \
              --retention-time $RETENTION_DAYS \
              --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
            
            if [ $? -eq 0 ]; then
              # Get workspace ID
              WORKSPACE_ID=$(echo "$WORKSPACE_RESULT" | jq -r '.id')
              echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
              echo "Log Analytics workspace created with ID: $WORKSPACE_ID"
              echo "status=created" >> $GITHUB_OUTPUT
            else
              echo "ERROR: Failed to create Log Analytics workspace"
              echo "$WORKSPACE_RESULT"
              exit 1
            fi
          fi

      # ==========================================================================
      # NETWORKING DEPLOYMENT
      # ==========================================================================
      - name: Create Management VNet
        id: create_vnet
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "Creating management VNet..."
          
          # Check if VNet already exists
          EXISTING_VNET=$(az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[?name=='vnet-management'].id" -o tsv)
          
          if [ -n "$EXISTING_VNET" ]; then
            echo "VNet already exists with ID: $EXISTING_VNET"
            echo "VNET_ID=$EXISTING_VNET" >> $GITHUB_ENV
          else
            # Create VNet with Azure CLI
            VNET_RESULT=$(az network vnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name vnet-management \
              --address-prefix 10.0.0.0/16 \
              --subnet-name subnet-management \
              --subnet-prefix 10.0.0.0/24 \
              --location ${{ env.LOCATION }} \
              --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
            
            if [ $? -eq 0 ]; then
              # Store VNet ID for diagnostics configuration
              VNET_ID=$(az network vnet show \
                --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                --name vnet-management \
                --query id -o tsv)
              
              echo "VNET_ID=$VNET_ID" >> $GITHUB_ENV
              echo "VNet created with ID: $VNET_ID"
            else
              echo "ERROR: Failed to create VNet"
              echo "$VNET_RESULT"
              exit 1
            fi
          fi
          
          # Check if services subnet exists, add if missing
          EXISTING_SUBNET=$(az network vnet subnet list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --vnet-name vnet-management \
            --query "[?name=='subnet-services'].id" -o tsv)
          
          if [ -n "$EXISTING_SUBNET" ]; then
            echo "Services subnet already exists with ID: $EXISTING_SUBNET"
          else
            echo "Adding management services subnet..."
            SUBNET_RESULT=$(az network vnet subnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name vnet-management \
              --name subnet-services \
              --address-prefix 10.0.1.0/24)
            
            if [ $? -eq 0 ]; then
              echo "Services subnet created successfully"
            else
              echo "WARNING: Failed to create services subnet"
              echo "$SUBNET_RESULT"
            fi
          fi
          
          echo "VNet configuration completed"

      # ==========================================================================
      # DIAGNOSTICS CONFIGURATION - WITH PROVIDER REGISTRATION CHECK
      # ==========================================================================
      - name: Configure Diagnostics Settings
        id: configure_diagnostics
        if: ${{ (github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '') && env.WORKSPACE_ID != '' && env.VNET_ID != '' }}
        run: |
          echo "Configuring diagnostics settings..."
          
          # Check if Microsoft.Insights is registered
          echo "Verifying Microsoft.Insights registration status..."
          INSIGHTS_STATUS=$(az provider show --namespace Microsoft.Insights --query "registrationState" -o tsv)
          echo "Microsoft.Insights status: $INSIGHTS_STATUS"
          
          if [ "$INSIGHTS_STATUS" != "Registered" ]; then
            echo "Microsoft.Insights is not fully registered yet. Waiting for registration to complete..."
            
            # Wait for registration with timeout
            MAX_WAIT=300  # 5 minutes
            START_TIME=$(date +%s)
            
            while [ "$INSIGHTS_STATUS" != "Registered" ]; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              
              if [ $ELAPSED_TIME -gt $MAX_WAIT ]; then
                echo "Timeout waiting for Microsoft.Insights registration. Will skip diagnostics configuration."
                echo "Please run the diagnostics configuration manually later."
                exit 0
              fi
              
              echo "Waiting for registration to complete. Elapsed time: $ELAPSED_TIME seconds"
              sleep 15
              INSIGHTS_STATUS=$(az provider show --namespace Microsoft.Insights --query "registrationState" -o tsv)
              echo "Microsoft.Insights status: $INSIGHTS_STATUS"
            done
            
            echo "Microsoft.Insights is now registered. Proceeding with diagnostics configuration."
          fi
          
          # Check if both required resources exist
          if [ -n "$VNET_ID" ] && [ -n "$WORKSPACE_ID" ]; then
            # Check if diagnostics already configured
            EXISTING_DIAG=$(az monitor diagnostic-settings list --resource "$VNET_ID" --query "[?name=='diag-to-log-analytics'].id" -o tsv 2>/dev/null || echo "")
            
            if [ -n "$EXISTING_DIAG" ]; then
              echo "Diagnostics settings already exist for VNet"
            else
              # Configure diagnostics settings for VNet
              echo "Creating diagnostic settings..."
              DIAG_RESULT=$(az monitor diagnostic-settings create \
                --name "diag-to-log-analytics" \
                --resource "$VNET_ID" \
                --workspace "$WORKSPACE_ID" \
                --logs '[{"category":"VMProtectionAlerts","enabled":true}]' \
                --metrics '[{"category":"AllMetrics","enabled":true}]')
              
              if [ $? -eq 0 ]; then
                echo "Diagnostics settings configured successfully for VNet"
                echo "$DIAG_RESULT" | jq .
              else
                echo "WARNING: Failed to configure diagnostics settings"
                echo "$DIAG_RESULT"
                echo "This is likely due to Microsoft.Insights not being fully registered yet."
                echo "You can manually configure diagnostics later."
              fi
            fi
          else
            echo "WARNING: Unable to configure diagnostics - missing VNet ID or Workspace ID"
            echo "VNet ID: $VNET_ID"
            echo "Workspace ID: $WORKSPACE_ID"
          fi

      # ==========================================================================
      # VALIDATION AND TESTING
      # ==========================================================================
      - name: Validate Deployed Resources
        id: validate_resources
        run: |
          echo "Validating deployed resources..."
          
          # Check resource group
          RG_CHECK=$(az group show --name ${{ env.RESOURCE_GROUP_NAME }} --query id -o tsv)
          if [ -n "$RG_CHECK" ]; then
            echo "✅ Resource group validation passed"
          else
            echo "❌ Resource group validation failed"
            exit 1
          fi
          
          # Check policy assignment if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "policies" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            POLICY_CHECK=$(az policy assignment list --scope "/subscriptions/${{ env.MANAGEMENT_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" --query "[?name=='enforce-tag-policy'].id" -o tsv)
            if [ -n "$POLICY_CHECK" ]; then
              echo "✅ Policy assignment validation passed"
            else
              echo "❌ Policy assignment validation failed"
              exit 1
            fi
          fi
          
          # Check Log Analytics workspace if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "diagnostics" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            WORKSPACE_CHECK=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type Microsoft.OperationalInsights/workspaces --query "[0].id" -o tsv)
            if [ -n "$WORKSPACE_CHECK" ]; then
              echo "✅ Log Analytics workspace validation passed"
            else
              echo "❌ Log Analytics workspace validation failed"
              exit 1
            fi
          fi
          
          # Check VNet if it was deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "networking" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            VNET_CHECK=$(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name vnet-management --query id -o tsv)
            if [ -n "$VNET_CHECK" ]; then
              echo "✅ VNet validation passed"
              
              # Check subnet count
              SUBNET_COUNT=$(az network vnet subnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --vnet-name vnet-management --query "length(@)" -o tsv)
              if [ "$SUBNET_COUNT" -ge 2 ]; then
                echo "✅ Subnet validation passed ($SUBNET_COUNT subnets found)"
              else
                echo "❌ Subnet validation failed (expected at least 2 subnets, found $SUBNET_COUNT)"
                exit 1
              fi
            else
              echo "❌ VNet validation failed"
              exit 1
            fi
          fi
          
          echo "All validation checks passed!"
          echo "status=success" >> $GITHUB_OUTPUT

      # ==========================================================================
      # DEPLOYMENT SUMMARY
      # ==========================================================================
      - name: Create Deployment Summary
        id: deployment_summary
        run: |
          echo "Creating deployment summary..."
          
          # Create JSON deployment summary
          cat > ./deployment-summary.json << EOL
          {
            "deploymentId": "${{ github.run_id }}",
            "timestamp": "${{ env.DEPLOYMENT_TIMESTAMP }}",
            "deployedBy": "${{ env.DEPLOYMENT_USER }}",
            "environment": {
              "resourceGroup": "${{ env.RESOURCE_GROUP_NAME }}",
              "location": "${{ env.LOCATION }}",
              "subscription": "${{ env.MANAGEMENT_SUBSCRIPTION_ID }}"
            },
            "components": {
              "policy": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' }},
                "name": "enforce-tag-policy",
                "id": "${{ env.POLICY_ID || 'not-deployed' }}"
              },
              "logAnalytics": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' }},
                "name": "log-analytics-mgmt",
                "id": "${{ env.WORKSPACE_ID || 'not-deployed' }}",
                "status": "${{ steps.log_analytics.outputs.status || 'unknown' }}"
              },
              "networking": {
                "deployed": ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' }},
                "name": "vnet-management",
                "id": "${{ env.VNET_ID || 'not-deployed' }}"
              }
            },
            "repository": {
              "name": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "workflow": "${{ github.workflow }}",
              "runUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOL
          
          # Create markdown summary
          cat > ./deployment-summary.md << EOL
          # Azure Landing Zone Deployment Summary
          
          ## Deployment Information
          - **Deployment ID**: ${{ github.run_id }}
          - **Timestamp**: ${{ env.DEPLOYMENT_TIMESTAMP }}
          - **Deployed By**: ${{ env.DEPLOYMENT_USER }}
          - **Workflow**: ${{ github.workflow }}
          
          ## Environment
          - **Resource Group**: ${{ env.RESOURCE_GROUP_NAME }}
          - **Location**: ${{ env.LOCATION }}
          - **Subscription**: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}
          
          ## Components Deployed
          
          | Component | Status | Name | Resource ID |
          |-----------|--------|------|------------|
          | Policy | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | enforce-tag-policy | ${{ env.POLICY_ID || 'N/A' }} |
          | Log Analytics | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | log-analytics-mgmt | ${{ env.WORKSPACE_ID || 'N/A' }} |
          | Networking | ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' && '✅ Deployed' || '❌ Not Deployed' }} | vnet-management | ${{ env.VNET_ID || 'N/A' }} |
          
          ## Resource List
          \`\`\`
          $(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table)
          \`\`\`
          
          ## Next Steps
          1. Configure additional security settings
          2. Set up monitoring alerts
          3. Connect to other Azure services
          
          [View Run Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOL
          
          # Print text summary
          echo "===================================================="
          echo "DEPLOYMENT SUMMARY: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Deployed by: ${{ env.DEPLOYMENT_USER }}"
          echo "===================================================="
          echo "Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "Location: ${{ env.LOCATION }}"
          echo ""
          
          echo "Resources deployed:"
          az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "Policy Assignments:"
          az policy assignment list --scope "/subscriptions/${{ env.MANAGEMENT_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" -o table
          
          echo ""
          echo "Network Configuration:"
          az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          echo "Subnets:"
          az network vnet subnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --vnet-name vnet-management -o table
          
          echo ""
          echo "Log Analytics Workspace:"
          az monitor log-analytics workspace list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "Deployment completed successfully at ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "===================================================="

      # ==========================================================================
      # ARTIFACT UPLOADS
      # ==========================================================================
      - name: Upload Deployment Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: |
            ./deployment-summary.json
            ./deployment-summary.md
            ./policy-params.json
          retention-days: 90

  # ==========================================================================
  # NOTIFICATION JOB
  # ==========================================================================
  notify:
    name: Send Deployment Notification
    needs: deploy-management
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set notification status
        id: set_status
        run: |
          if [[ "${{ needs.deploy-management.outputs.deploymentStatus }}" == "success" ]]; then
            echo "STATUS=✅ Successful" >> $GITHUB_OUTPUT
          else
            echo "STATUS=❌ Failed" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: ./artifacts

      - name: Prepare notification
        run: |
          echo "Azure Landing Zone Deployment ${{ steps.set_status.outputs.STATUS }}" > ./notification.txt
          echo "" >> ./notification.txt
          echo "Deployment ID: ${{ github.run_id }}" >> ./notification.txt
          echo "Timestamp: ${{ env.DEPLOYMENT_TIMESTAMP }}" >> ./notification.txt
          echo "Repository: ${{ github.repository }}" >> ./notification.txt
          echo "Workflow: ${{ github.workflow }}" >> ./notification.txt
          echo "" >> ./notification.txt
          echo "Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ./notification.txt
          
          if [[ -n "${{ env.NOTIFICATION_EMAIL }}" ]]; then
            echo "Notification would be sent to ${{ env.NOTIFICATION_EMAIL }}"
            cat ./notification.txt
          else
            echo "No notification email configured"
          fi