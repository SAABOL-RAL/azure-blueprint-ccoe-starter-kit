# ==========================================================================
# Enterprise Azure Landing Zone - Deployment Workflow
# ==========================================================================
# Last Updated: 2025-06-10 13:04:16 UTC
# Author: GEP-V
#
# PROMPT ENGINEERING GUIDANCE:
# This workflow handles deployment of Azure landing zone components with:
# - Policy enforcement for resource tagging (FIXED - includes both tagName and tagValue)
# - Centralized logging with Log Analytics (Direct resource creation)
# - Management networking infrastructure
# - Diagnostic settings for operational monitoring
#
# BEST PRACTICES IMPLEMENTED:
# 1. Resource provider registration before deployment
# 2. Fixed policy parameters with both required values
# 3. Direct resource creation to avoid external dependencies
# 4. Resource ID capturing for cross-resource configuration
# 5. Detailed logging and error handling

name: Deploy Azure Landing Zone

on:
  push:
    branches:
      - main
    paths:
      - 'landing-zone/**'
      - '.github/workflows/deploy-landing-zone.yml'
  
  workflow_dispatch:
    inputs:
      deploymentType:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - policies
          - diagnostics
          - networking

# ==========================================================================
# PERMISSIONS
# ==========================================================================
permissions:
  id-token: write  # Required for Azure OIDC authentication
  contents: read   # Required to read repo files
  actions: write   # Required for artifact upload

# ==========================================================================
# ENVIRONMENT VARIABLES
# ==========================================================================
env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-management
  LOCATION: eastus2
  DEPLOYMENT_TIMESTAMP: "2025-06-10 13:04:16"
  DEPLOYMENT_USER: "GEP-V"
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  MAX_RETRY_ATTEMPTS: 3

jobs:
  deploy-management:
    name: Deploy Management Resources
    runs-on: ubuntu-latest
    outputs:
      deploymentStatus: ${{ steps.validate_resources.outputs.status }}
      resourceGroupId: ${{ steps.create_rg.outputs.resourceGroupId }}
    
    steps:
      # ==========================================================================
      # SETUP AND AUTHENTICATION
      # ==========================================================================
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Azure CLI extensions
        run: |
          echo "Installing required Azure CLI extensions..."
          az extension add --name resource-graph --upgrade --yes || true
          az extension add --name log-analytics --upgrade --yes || true
          az extension add --name azure-devops --upgrade --yes || true

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.MANAGEMENT_SUBSCRIPTION_ID }}

      # ==========================================================================
      # RESOURCE PROVIDER REGISTRATION
      # ==========================================================================
      - name: Register Required Azure Resource Providers
        id: register_providers
        run: |
          echo "Registering required Azure resource providers..."
          
          # List of providers required for the landing zone
          PROVIDERS=(
            "Microsoft.Insights"
            "Microsoft.OperationalInsights"
            "Microsoft.Network"
            "Microsoft.Storage"
            "Microsoft.Compute"
            "Microsoft.Authorization"
            "Microsoft.Resources"
            "Microsoft.PolicyInsights"
          )
          
          # Register each provider
          for PROVIDER in "${PROVIDERS[@]}"
          do
            echo "Registering provider: $PROVIDER"
            az provider register --namespace $PROVIDER
          done
          
          echo "providersRegistered=true" >> $GITHUB_OUTPUT

      - name: Create Management Resource Group
        id: create_rg
        run: |
          echo "Creating management resource group..."
          echo "Current Date and Time: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Current User: ${{ env.DEPLOYMENT_USER }}"
          
          RG_RESULT=$(az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Resource group created successfully"
            RG_ID=$(echo "$RG_RESULT" | jq -r '.id')
            echo "resourceGroupId=$RG_ID" >> $GITHUB_OUTPUT
            echo "Created resource group with ID: $RG_ID"
          else
            echo "‚ùå ERROR: Failed to create resource group"
            exit 1
          fi

      # ==========================================================================
      # POLICY ASSIGNMENT DEPLOYMENT - CORRECTED WITH BOTH PARAMETERS
      # ==========================================================================
      - name: Deploy Policy Assignment with Both Required Parameters
        id: deploy_policy
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'policies' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "======================================================"
          echo "POLICY DEPLOYMENT - CORRECTED VERSION"
          echo "======================================================"
          echo "Current Date and Time: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Current User: ${{ env.DEPLOYMENT_USER }}"
          echo "Issue: Previous command was missing 'tagValue' parameter"
          echo "Fix: Including BOTH 'tagName' AND 'tagValue' parameters"
          echo "======================================================"
          
          DEPLOYMENT_NAME="policy-assignment-$(date +%s)"
          
          echo "Deployment Details:"
          echo "- Deployment Name: $DEPLOYMENT_NAME"
          echo "- Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "- Policy Definition: 1e30110a-5ceb-460c-a204-c1c3969c6d62"
          echo "- Tag Name: Environment"
          echo "- Tag Value: Production"
          echo "- Enforcement Mode: Default"
          
          echo ""
          echo "üîß CORRECTED COMMAND EXECUTION:"
          echo "Adding both tagName=Environment AND tagValue=Production"
          
          POLICY_RESULT=$(az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name $DEPLOYMENT_NAME \
            --template-file ./landing-zone/modules/policy.bicep \
            --parameters assignmentName="enforce-tag-policy" \
                        policyDefinitionId="/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62" \
                        policyDescription="Enforces Environment tag with value Production on all resources" \
                        displayName="Require Environment Tag" \
                        policyParameters='{"tagName":{"value":"Environment"},"tagValue":{"value":"Production"}}' \
                        enforcementMode="Default" \
                        useIdentity=false \
            --verbose)
          
          if [ $? -eq 0 ]; then
            echo ""
            echo "‚úÖ SUCCESS: Policy deployment completed!"
            echo "======================================================"
            echo "$POLICY_RESULT" | jq .
            echo "======================================================"
            
            POLICY_ID=$(echo "$POLICY_RESULT" | jq -r '.properties.outputs.policyAssignmentId.value')
            echo "POLICY_ID=$POLICY_ID" >> $GITHUB_ENV
            echo "Policy Assignment ID: $POLICY_ID"
            
            # Verify both parameters are present
            echo ""
            echo "üîç VERIFICATION: Checking policy parameters..."
            SUBSCRIPTION_ID=$(az account show --query id -o tsv)
            SCOPE="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}"
            PARAMS_CHECK=$(az policy assignment show --name enforce-tag-policy --scope $SCOPE --query "parameters")
            echo "Policy parameters: $PARAMS_CHECK"
            
            # Verify specific parameters exist
            TAG_NAME_CHECK=$(echo "$PARAMS_CHECK" | jq -r '.tagName.value // "missing"')
            TAG_VALUE_CHECK=$(echo "$PARAMS_CHECK" | jq -r '.tagValue.value // "missing"')
            
            echo "‚úÖ tagName parameter: $TAG_NAME_CHECK"
            echo "‚úÖ tagValue parameter: $TAG_VALUE_CHECK"
            
            if [[ "$TAG_NAME_CHECK" != "missing" && "$TAG_VALUE_CHECK" != "missing" ]]; then
              echo "‚úÖ VERIFIED: Both required parameters are present!"
            else
              echo "‚ùå ERROR: Missing required parameters"
              exit 1
            fi
          else
            echo "‚ùå ERROR: Policy deployment failed!"
            echo "$POLICY_RESULT"
            exit 1
          fi

      # ==========================================================================
      # LOG ANALYTICS WORKSPACE DEPLOYMENT
      # ==========================================================================
      - name: Deploy Log Analytics Workspace Using Direct Command
        id: log_analytics
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'diagnostics' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "======================================================"
          echo "LOG ANALYTICS WORKSPACE DEPLOYMENT"
          echo "======================================================"
          echo "Current Date and Time: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Current User: ${{ env.DEPLOYMENT_USER }}"
          echo "Method: Direct resource creation (no external templates)"
          echo "======================================================"
          
          WORKSPACE_NAME="log-analytics-mgmt"
          
          echo "Configuration:"
          echo "- Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "- Location: ${{ env.LOCATION }}"
          echo "- Workspace Name: $WORKSPACE_NAME"
          echo "- SKU: PerGB2018"
          echo "- Retention: 30 days"
          
          # Check if workspace already exists
          echo ""
          echo "üîç Checking if workspace already exists..."
          EXISTING_WORKSPACE=$(az monitor log-analytics workspace list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[?name=='$WORKSPACE_NAME'].id" -o tsv 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_WORKSPACE" ]; then
            echo "‚úÖ Workspace already exists with ID: $EXISTING_WORKSPACE"
            WORKSPACE_ID=$EXISTING_WORKSPACE
            echo "status=exists" >> $GITHUB_OUTPUT
          else
            echo "üîß Creating new Log Analytics workspace..."
            
            WORKSPACE_RESULT=$(az resource create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name $WORKSPACE_NAME \
              --resource-type "Microsoft.OperationalInsights/workspaces" \
              --location ${{ env.LOCATION }} \
              --properties '{"sku":{"name":"PerGB2018"},"retentionInDays":30,"features":{"enableLogAccessUsingOnlyResourcePermissions":true},"publicNetworkAccessForIngestion":"Enabled","publicNetworkAccessForQuery":"Enabled"}' \
              --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
            
            if [ $? -eq 0 ]; then
              WORKSPACE_ID=$(echo "$WORKSPACE_RESULT" | jq -r '.id')
              echo "‚úÖ SUCCESS: Log Analytics workspace created!"
              echo "Workspace ID: $WORKSPACE_ID"
              echo "status=created" >> $GITHUB_OUTPUT
            else
              echo "‚ùå ERROR: Failed to create Log Analytics workspace"
              echo "$WORKSPACE_RESULT"
              exit 1
            fi
          fi
          
          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
          echo "======================================================"
          echo "‚úÖ Log Analytics workspace deployment completed!"
          echo "======================================================"

      # ==========================================================================
      # NETWORKING DEPLOYMENT
      # ==========================================================================
      - name: Create Management VNet
        id: create_vnet
        if: ${{ github.event.inputs.deploymentType == 'all' || github.event.inputs.deploymentType == 'networking' || github.event.inputs.deploymentType == '' }}
        run: |
          echo "======================================================"
          echo "VIRTUAL NETWORK DEPLOYMENT"
          echo "======================================================"
          echo "Current Date and Time: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Current User: ${{ env.DEPLOYMENT_USER }}"
          echo "======================================================"
          
          # Check if VNet already exists
          echo "üîç Checking if VNet already exists..."
          EXISTING_VNET=$(az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[?name=='vnet-management'].id" -o tsv)
          
          if [ -n "$EXISTING_VNET" ]; then
            echo "‚úÖ VNet already exists with ID: $EXISTING_VNET"
            echo "VNET_ID=$EXISTING_VNET" >> $GITHUB_ENV
          else
            echo "üîß Creating new management VNet..."
            
            VNET_RESULT=$(az network vnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name vnet-management \
              --address-prefix 10.0.0.0/16 \
              --subnet-name subnet-management \
              --subnet-prefix 10.0.0.0/24 \
              --location ${{ env.LOCATION }} \
              --tags Environment=Production DeployedBy=${{ env.DEPLOYMENT_USER }} DeployedAt="${{ env.DEPLOYMENT_TIMESTAMP }}")
            
            if [ $? -eq 0 ]; then
              VNET_ID=$(az network vnet show \
                --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                --name vnet-management \
                --query id -o tsv)
              
              echo "VNET_ID=$VNET_ID" >> $GITHUB_ENV
              echo "‚úÖ SUCCESS: VNet created with ID: $VNET_ID"
            else
              echo "‚ùå ERROR: Failed to create VNet"
              echo "$VNET_RESULT"
              exit 1
            fi
          fi
          
          # Add services subnet
          echo ""
          echo "üîß Configuring services subnet..."
          EXISTING_SUBNET=$(az network vnet subnet list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --vnet-name vnet-management \
            --query "[?name=='subnet-services'].id" -o tsv)
          
          if [ -n "$EXISTING_SUBNET" ]; then
            echo "‚úÖ Services subnet already exists"
          else
            echo "Creating services subnet..."
            SUBNET_RESULT=$(az network vnet subnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name vnet-management \
              --name subnet-services \
              --address-prefix 10.0.1.0/24)
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Services subnet created successfully"
            else
              echo "‚ö†Ô∏è WARNING: Failed to create services subnet"
            fi
          fi
          
          echo "======================================================"
          echo "‚úÖ VNet configuration completed!"
          echo "======================================================"

      # ==========================================================================
      # VALIDATION
      # ==========================================================================
      - name: Validate Deployed Resources
        id: validate_resources
        run: |
          echo "======================================================"
          echo "DEPLOYMENT VALIDATION"
          echo "======================================================"
          echo "Current Date and Time: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Current User: ${{ env.DEPLOYMENT_USER }}"
          echo "======================================================"
          
          VALIDATION_PASSED=true
          
          # Check resource group
          echo "üîç Validating resource group..."
          RG_CHECK=$(az group show --name ${{ env.RESOURCE_GROUP_NAME }} --query id -o tsv)
          if [ -n "$RG_CHECK" ]; then
            echo "‚úÖ Resource group validation passed"
          else
            echo "‚ùå Resource group validation failed"
            VALIDATION_PASSED=false
          fi
          
          # Check policy assignment if deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "policies" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            echo ""
            echo "üîç Validating policy assignment..."
            SUBSCRIPTION_ID=$(az account show --query id -o tsv)
            POLICY_CHECK=$(az policy assignment list --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" --query "[?name=='enforce-tag-policy'].id" -o tsv)
            
            if [ -n "$POLICY_CHECK" ]; then
              echo "‚úÖ Policy assignment found"
              
              # Verify parameters
              PARAMS_CHECK=$(az policy assignment show --name enforce-tag-policy --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" --query "parameters | keys(@)" -o tsv)
              if [[ "$PARAMS_CHECK" == *"tagName"* && "$PARAMS_CHECK" == *"tagValue"* ]]; then
                echo "‚úÖ Policy parameters validation passed (both tagName and tagValue present)"
              else
                echo "‚ùå Policy parameters validation failed"
                VALIDATION_PASSED=false
              fi
            else
              echo "‚ùå Policy assignment validation failed"
              VALIDATION_PASSED=false
            fi
          fi
          
          # Check Log Analytics if deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "diagnostics" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            echo ""
            echo "üîç Validating Log Analytics workspace..."
            WORKSPACE_CHECK=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type Microsoft.OperationalInsights/workspaces --query "[0].id" -o tsv)
            if [ -n "$WORKSPACE_CHECK" ]; then
              echo "‚úÖ Log Analytics workspace validation passed"
            else
              echo "‚ùå Log Analytics workspace validation failed"
              VALIDATION_PASSED=false
            fi
          fi
          
          # Check VNet if deployed
          if [[ "${{ github.event.inputs.deploymentType }}" == "all" || "${{ github.event.inputs.deploymentType }}" == "networking" || "${{ github.event.inputs.deploymentType }}" == "" ]]; then
            echo ""
            echo "üîç Validating VNet..."
            VNET_CHECK=$(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name vnet-management --query id -o tsv)
            if [ -n "$VNET_CHECK" ]; then
              echo "‚úÖ VNet validation passed"
            else
              echo "‚ùå VNet validation failed"
              VALIDATION_PASSED=false
            fi
          fi
          
          echo ""
          echo "======================================================"
          if [ "$VALIDATION_PASSED" = true ]; then
            echo "‚úÖ ALL VALIDATION CHECKS PASSED!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå VALIDATION FAILED!"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "======================================================"

      # ==========================================================================
      # DEPLOYMENT SUMMARY
      # ==========================================================================
      - name: Create Final Deployment Summary
        run: |
          echo "======================================================"
          echo "FINAL DEPLOYMENT SUMMARY"
          echo "======================================================"
          echo "Deployment Timestamp: ${{ env.DEPLOYMENT_TIMESTAMP }}"
          echo "Deployed By: ${{ env.DEPLOYMENT_USER }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "Location: ${{ env.LOCATION }}"
          echo "======================================================"
          
          echo ""
          echo "üìã DEPLOYED RESOURCES:"
          az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "üìã POLICY ASSIGNMENTS:"
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          az policy assignment list --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}" -o table
          
          echo ""
          echo "üìã NETWORK RESOURCES:"
          az network vnet list --resource-group ${{ env.RESOURCE_GROUP_NAME }} -o table
          
          echo ""
          echo "üìã LOG ANALYTICS WORKSPACES:"
          az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type Microsoft.OperationalInsights/workspaces -o table
          
          echo ""
          echo "======================================================"
          echo "‚úÖ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "Run ID: ${{ github.run_id }}"
          echo "View Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "======================================================"