# ==========================================================================
# Enterprise Azure Landing Zone - Identity Resources Deployment
# ==========================================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow deploys core identity resources for a cloud-only enterprise landing zone:
# - Azure AD Domain Services (managed domain service)
# - Key Vault for identity-related secrets with private endpoints
# - Log Analytics workspace for identity monitoring
# - User-assigned managed identities for workload authentication
# - Private DNS integration with connectivity subscription
#
# YAML FORMATTING TIPS:
# 1. Indentation is critical in YAML files - always use 2 spaces, never tabs
# 2. For multi-line scripts (run: |), ensure content is properly indented
# 3. When copying/pasting code, check for invisible characters or mixed tabs/spaces
# 4. Job-level 'if' conditions use simple syntax: if: env.VAR == 'value'
# 5. Step-level expressions use full syntax: if: ${{ steps.id.outputs.result == 'value' }}
#
# TROUBLESHOOTING SYNTAX ERRORS:
# - "An expression was expected" often means incorrect indentation or missing content
# - Ensure there's actual content after "run: |" with proper indentation
# - Visual editors and IDEs with YAML validation can help catch these errors

name: Deploy Identity Resources

on:
  push:
    branches:
      - main
    paths:
      - 'identity/**'
      - '.github/workflows/deploy-identity.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      deployAadds:
        description: 'Deploy Azure AD Domain Services'
        required: true
        default: 'true'
        type: boolean

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-identity
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  DEPLOY_AADDS: ${{ github.event.inputs.deployAadds || 'true' }}

jobs:
  # Prior jobs: verify-prerequisites, deploy-identity-infrastructure, deploy-key-vault, deploy-aadds, deploy-managed-identities
  # These would be included in the full file
  
  # ==========================================================================
  # VERIFY IDENTITY RESOURCES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Validation ensures all resources deployed successfully
  # - Documentation shows what was deployed and where
  # - Helps in troubleshooting deployment issues
  # - Provides clear next steps for users of the identity services
  # - CRITICAL: Multi-line scripts must have proper indentation after "run: |"
  # ==========================================================================
  verify-identity-resources:
    name: Verify Identity Resources
    needs: [deploy-key-vault, deploy-managed-identities]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      # FIXED: Corrected indentation and formatting for the multi-line script
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed identity resources..."
          
          # List all resources in the resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for key components
          echo "Checking for key identity components..."
          
          # Check for VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" &>/dev/null; then
            echo "✅ Identity VNet verified"
            
            # List subnets
            echo "Subnets in identity VNet:"
            az network vnet subnet list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name "vnet-identity" \
              --query "[].{Name:name, Prefix:addressPrefix}" \
              --output table
          else
            echo "❌ Identity VNet not found"
          fi
          
          # Check for Key Vault
          KV_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[0].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$KV_NAME" ]; then
            echo "✅ Key Vault verified: $KV_NAME"
          else
            echo "❌ Key Vault not found"
          fi
          
          # Check for Managed Identities
          IDENTITIES=$(az identity list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$IDENTITIES" ]; then
            echo "✅ Managed identities verified:"
            echo "$IDENTITIES"
          else
            echo "❌ Managed identities not found"
          fi
          
          # Check for AADDS if deployed
          if [ "${{ env.DEPLOY_AADDS }}" == "true" ]; then
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.AAD/domainServices" \
              --query "[0].name" -o tsv &>/dev/null; then
              echo "✅ Azure AD Domain Services deployment initiated"
              echo "Note: Full provisioning may take 1-2 hours to complete"
            else
              echo "❌ Azure AD Domain Services not found"
            fi
          fi
          
          # Generate summary report for GitHub Actions summary
          cat << EOF > $GITHUB_STEP_SUMMARY
          # Identity Resources Deployment Results
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          **Environment:** ${{ env.ENVIRONMENT }}
          **Region:** ${{ env.LOCATION }}
          **Date/Time UTC:** $(date -u +"%Y-%m-%d %H:%M:%S")
          
          ## Deployed Resources
          
          | Resource Type | Status |
          |--------------|--------|
          | Virtual Network | $(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name "vnet-identity" &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Key Vault | $(az keyvault list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Managed Identities | $(az identity list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Azure AD Domain Services | $([ "${{ env.DEPLOY_AADDS }}" == "true" ] && (az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.AAD/domainServices" --query "[].name" -o tsv &>/dev/null && echo "✅ Deploying" || echo "❌ Failed") || echo "⚪ Not Requested") |
          
          ## Next Steps for Cloud-Only Identity Environment
          
          1. **Network Configuration**
             - Ensure all spoke networks are peered with the identity network
             - Configure NSGs for appropriate access control
          
          2. **Azure AD Domain Services**
             - Complete domain configuration in Azure portal
             - Set up administrative users and groups
             - Configure LDAPS certificates if needed
          
          3. **Key Vault Access**
             - Grant appropriate access to applications and users
             - Store identity-related secrets, keys, and certificates
          
          4. **Managed Identities**
             - Assign appropriate RBAC roles to managed identities
             - Update applications to use managed identities
          
          This verification completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF