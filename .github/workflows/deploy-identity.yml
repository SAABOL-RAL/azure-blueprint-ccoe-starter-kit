# ==================================================================================
# Enterprise Azure Landing Zone - Identity Resources Deployment
# ==================================================================================

name: Deploy Identity Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      deployAadds:
        description: 'Deploy Azure AD Domain Services'
        required: true
        default: 'true'
        type: boolean

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-identity
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  DEPLOY_AADDS: ${{ github.event.inputs.deployAadds || 'true' }}

jobs:
  # ==================================================================================
  # VERIFY PREREQUISITES & CREATE RESOURCE GROUP
  # ==================================================================================
  verify-prerequisites:
    name: Verify Prerequisites
    runs-on: ubuntu-latest
    outputs:
      tenant_id: ${{ steps.output_params.outputs.tenant_id }}
      deploy_aadds: ${{ steps.output_params.outputs.deploy_aadds }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} workload=identity deployedBy=GitHub
          
          echo "Resource group created or confirmed."
      
      - name: Set output parameters
        id: output_params
        run: |
          echo "tenant_id=${{ env.AZURE_TENANT_ID }}" >> $GITHUB_OUTPUT
          echo "deploy_aadds=${{ env.DEPLOY_AADDS }}" >> $GITHUB_OUTPUT

  # ==================================================================================
  # DEPLOY IDENTITY NETWORK
  # ==================================================================================
  deploy-identity-network:
    name: Deploy Identity Network
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    outputs:
      vnet_id: ${{ steps.vnet_output.outputs.vnet_id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create identity-network.bicep
        run: |
          # Create directory structure
          mkdir -p landing-zone/modules
          
          # Create identity-network.bicep file
          cat > landing-zone/modules/identity-network.bicep << 'EOF'
          // Identity Network for cloud-only deployment
          @description('Azure region for all resources')
          param location string = resourceGroup().location

          @description('Environment name')
          param environment string = 'production'

          @description('Address space for the identity virtual network')
          param addressPrefix string = '10.2.0.0/16'

          @description('Name of the identity virtual network')
          param vnetName string = 'vnet-identity'

          @description('Tags to apply to all resources')
          param tags object = {
            environment: environment
            workload: 'identity'
            deployment: 'bicep'
          }

          // Define subnets
          var subnets = [
            {
              name: 'snet-identity-services'
              properties: {
                addressPrefix: '10.2.0.0/24'
                privateEndpointNetworkPolicies: 'Disabled'
              }
            }
            {
              name: 'snet-domain-services'
              properties: {
                addressPrefix: '10.2.1.0/24'
              }
            }
            {
              name: 'snet-private-endpoints'
              properties: {
                addressPrefix: '10.2.2.0/24'
                privateEndpointNetworkPolicies: 'Disabled'
              }
            }
          ]

          // Create Virtual Network
          resource identityVNet 'Microsoft.Network/virtualNetworks@2023-04-01' = {
            name: vnetName
            location: location
            tags: tags
            properties: {
              addressSpace: {
                addressPrefixes: [
                  addressPrefix
                ]
              }
              subnets: subnets
            }
          }

          // Output the VNet ID for use in other deployments
          output vnetId string = identityVNet.id
          output vnetName string = identityVNet.name
          EOF
      
      - name: Deploy identity network
        id: deploy_network
        run: |
          echo "Deploying identity network infrastructure..."
          
          # Deploy using the created Bicep file
          az deployment group create \
            --name "identity-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file landing-zone/modules/identity-network.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
      
      - name: Get VNet ID
        id: vnet_output
        run: |
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "Identity network deployed successfully."

  # ==================================================================================
  # DEPLOY KEY VAULT
  # ==================================================================================
  deploy-key-vault:
    name: Deploy Key Vault
    needs: deploy-identity-network
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create key-vault.bicep
        run: |
          # Create directory structure
          mkdir -p landing-zone/modules
          
          # Create key-vault.bicep file with corrected naming
          cat > landing-zone/modules/key-vault.bicep << 'EOF'
          // Key Vault with private endpoint for identity resources
          @description('Azure region for all resources')
          param location string = resourceGroup().location

          @description('Environment name')
          param environment string = 'production'

          @description('Key Vault name - must follow Azure naming rules')
          @minLength(3)
          @maxLength(24)
          param keyVaultName string

          @description('Azure AD tenant ID')
          param tenantId string

          @description('ID of the identity VNet')
          param vnetId string

          @description('Name of the subnet for private endpoints')
          param privateEndpointSubnetName string = 'snet-private-endpoints'

          @description('SKU name for Key Vault')
          param skuName string = 'standard'

          @description('Tags to apply to all resources')
          param tags object = {
            environment: environment
            workload: 'identity'
            deployment: 'bicep'
          }

          // Reference the subnet for private endpoint
          resource subnet 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' existing = {
            name: '${split(vnetId, '/')[8]}/${privateEndpointSubnetName}'
          }

          // Create Key Vault with enhanced security
          resource keyVault 'Microsoft.KeyVault/vaults@2023-02-01' = {
            name: keyVaultName
            location: location
            tags: tags
            properties: {
              sku: {
                family: 'A'
                name: skuName
              }
              tenantId: tenantId
              enabledForDeployment: true
              enabledForDiskEncryption: true
              enabledForTemplateDeployment: true
              enableRbacAuthorization: true
              enableSoftDelete: true
              softDeleteRetentionInDays: 90
              publicNetworkAccess: 'Disabled'
              networkAcls: {
                bypass: 'AzureServices'
                defaultAction: 'Deny'
              }
            }
          }

          // Create private endpoint for Key Vault
          resource privateEndpoint 'Microsoft.Network/privateEndpoints@2023-04-01' = {
            name: 'pe-${keyVaultName}'
            location: location
            tags: tags
            properties: {
              subnet: {
                id: subnet.id
              }
              privateLinkServiceConnections: [
                {
                  name: 'connection-to-${keyVaultName}'
                  properties: {
                    privateLinkServiceId: keyVault.id
                    groupIds: [
                      'vault'
                    ]
                  }
                }
              ]
            }
          }

          // Output Key Vault resource ID
          output keyVaultId string = keyVault.id
          output keyVaultName string = keyVault.name
          EOF
      
      - name: Deploy Key Vault
        run: |
          echo "Deploying Key Vault for identity secrets..."
          
          # Get the identity VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          # Create a guaranteed valid Key Vault name
          # Format: kv + random 8-character alphanumeric string
          KV_NAME="kv$(openssl rand -hex 4)"
          
          # Deploy Key Vault using module with explicit name
          az deployment group create \
            --name "key-vault-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file landing-zone/modules/key-vault.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         tenantId=${{ env.AZURE_TENANT_ID }} \
                         vnetId=$VNET_ID \
                         keyVaultName=$KV_NAME
          
          echo "Key Vault $KV_NAME deployed successfully."