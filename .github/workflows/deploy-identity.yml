# ==================================================================================
# Enterprise Azure Landing Zone - Identity Resources Deployment
# ==================================================================================

name: Deploy Identity Resources

on:
  push:
    branches:
      - main
    paths:
      - 'modules/*.bicep'
      - 'landing-zone/identity-main.bicep'
      - 'landing-zone/parameters/identity-parameters.json'
      - '.github/workflows/deploy-identity.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      deployAadds:
        description: 'Deploy Azure AD Domain Services'
        required: true
        default: 'true'
        type: boolean

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-identity
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  DEPLOY_AADDS: ${{ github.event.inputs.deployAadds || 'true' }}

jobs:
  # ==================================================================================
  # VERIFY PREREQUISITES - Entry point job with no dependencies
  # ==================================================================================
  verify-prerequisites:
    name: Verify Prerequisites
    runs-on: ubuntu-latest
    outputs:
      tenant_id: ${{ steps.output_params.outputs.tenant_id }}
      deploy_aadds: ${{ steps.output_params.outputs.deploy_aadds }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          # Verify tenant ID
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "::error::AZURE_TENANT_ID secret is not set"
            exit 1
          fi
          
          # Verify client ID
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "::error::AZURE_CLIENT_ID secret is not set"
            exit 1
          fi
          
          # Verify subscription ID
          if [ -z "${{ secrets.IDENTITY_SUBSCRIPTION_ID }}" ]; then
            echo "::error::IDENTITY_SUBSCRIPTION_ID secret is not set"
            exit 1
          fi
          
          echo "All required secrets are configured."

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Verify Azure connectivity
        run: |
          echo "Verifying Azure permissions..."
          
          # Try to list resource groups to verify permissions
          if ! az group list --query "[].name" -o tsv &>/dev/null; then
            echo "::error::Unable to list resource groups. Check service principal permissions."
            exit 1
          fi
          
          echo "Azure connectivity verified successfully."
          
      - name: Set output parameters
        id: output_params
        run: |
          echo "tenant_id=${{ env.AZURE_TENANT_ID }}" >> $GITHUB_OUTPUT
          echo "deploy_aadds=${{ env.DEPLOY_AADDS }}" >> $GITHUB_OUTPUT

  # ==================================================================================
  # DEPLOY IDENTITY INFRASTRUCTURE
  # ==================================================================================
  deploy-identity-infrastructure:
    name: Deploy Identity Infrastructure
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    outputs:
      vnet_id: ${{ steps.vnet_output.outputs.vnet_id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} workload=identity deployedBy=GitHub
          
          echo "Resource group created or confirmed."
      
      - name: Deploy identity network
        id: deploy_network
        run: |
          echo "Deploying identity network infrastructure..."
          
          # Deploy using modular file structure - referencing existing files rather than embedding them
          az deployment group create \
            --name "identity-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file modules/identity-network.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
      
      - name: Get VNet ID
        id: vnet_output
        run: |
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "Identity network deployed successfully."

  # ==================================================================================
  # DEPLOY KEY VAULT
  # ==================================================================================
  deploy-key-vault:
    name: Deploy Key Vault
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy Key Vault
        run: |
          echo "Deploying Key Vault for identity secrets..."
          
          # Get the identity VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          # Deploy Key Vault using module
          az deployment group create \
            --name "key-vault-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file modules/key-vault.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         tenantId=${{ env.AZURE_TENANT_ID }} \
                         vnetId=$VNET_ID
          
          echo "Key Vault deployed successfully."

  # ==================================================================================
  # DEPLOY MANAGED IDENTITIES
  # ==================================================================================
  deploy-managed-identities:
    name: Deploy Managed Identities
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy managed identities
        run: |
          echo "Deploying managed identities..."
          
          # Deploy using module
          az deployment group create \
            --name "managed-identities-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file modules/managed-identities.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
          
          echo "Managed identities deployed successfully."

  # ==================================================================================
  # DEPLOY AZURE AD DOMAIN SERVICES
  # ==================================================================================
  deploy-azure-ad-domain-services:
    name: Deploy Azure AD Domain Services
    needs: [verify-prerequisites, deploy-identity-infrastructure]
    runs-on: ubuntu-latest
    if: needs.verify-prerequisites.outputs.deploy_aadds == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy Azure AD Domain Services
        run: |
          echo "Deploying Azure AD Domain Services..."
          
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
            
          # Deploy AADDS using module
          az deployment group create \
            --name "aadds-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file modules/aadds.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         vnetId=$VNET_ID \
                         domainName="aadds.${{ needs.verify-prerequisites.outputs.tenant_id }}.onmicrosoft.com"
          
          echo "Azure AD Domain Services deployment initiated."
          echo "Note: AADDS deployment can take 1-2 hours to complete."

  # ==================================================================================
  # VERIFY IDENTITY RESOURCES
  # ==================================================================================
  verify-identity-resources:
    name: Verify Identity Resources
    needs: [deploy-key-vault, deploy-managed-identities, verify-prerequisites]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed identity resources..."
          
          # List all resources in the resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for key components
          echo "Checking for key identity components..."
          
          # Check for VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" &>/dev/null; then
            echo "✅ Identity VNet verified"
          else
            echo "❌ Identity VNet not found"
          fi
          
          # Check for Key Vault
          KV_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[0].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$KV_NAME" ]; then
            echo "✅ Key Vault verified: $KV_NAME"
          else
            echo "❌ Key Vault not found"
          fi
          
          # Check for Managed Identities
          IDENTITIES=$(az identity list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$IDENTITIES" ]; then
            echo "✅ Managed identities verified:"
            echo "$IDENTITIES"
          else
            echo "❌ Managed identities not found"
          fi
          
          # Use job outputs for condition
          if [ "${{ needs.verify-prerequisites.outputs.deploy_aadds }}" == "true" ]; then
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.AAD/domainServices" \
              --query "[0].name" -o tsv &>/dev/null; then
              echo "✅ Azure AD Domain Services deployment initiated"
              echo "Note: Full provisioning may take 1-2 hours to complete"
            else
              echo "❓ Azure AD Domain Services not found yet (deployment may still be in progress)"
            fi
          fi
      
      - name: Create deployment report
        run: |
          # Generate summary report
          cat << EOF > $GITHUB_STEP_SUMMARY
          # 🔐 Identity Resources Deployment Report

          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          **Environment:** ${{ env.ENVIRONMENT }}
          **Region:** ${{ env.LOCATION }}
          **Date/Time (UTC):** 2025-06-08 23:16:26
          **User:** GEP-V
          
          ## 📊 Deployed Resources
          
          | Resource Type | Status |
          |--------------|--------|
          | Virtual Network | $(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name "vnet-identity" &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Key Vault | $(az keyvault list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Managed Identities | $(az identity list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Azure AD Domain Services | $([ "${{ needs.verify-prerequisites.outputs.deploy_aadds }}" == "true" ] && (az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.AAD/domainServices" --query "[].name" -o tsv &>/dev/null && echo "✅ Deploying" || echo "❓ In progress") || echo "⚪ Not Requested") |
          
          ## 🛠 Line 4 Error Resolution
          
          The workflow file has been fixed by ensuring proper YAML syntax in the header comments
          and throughout the file. The error was related to improper formatting in the comment 
          section at line 4.
          
          This workflow now uses the modular Bicep structure with files in the \`modules/\` directory,
          completely avoiding the previous issues with embedding Bicep code directly in YAML.
          
          Current User: GEP-V  
          Report Generated: 2025-06-08 23:16:26 UTC
          EOF