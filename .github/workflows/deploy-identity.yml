# ==========================================================================
# Enterprise Azure Landing Zone - Identity Resources Deployment
# ==========================================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow provisions core identity resources for a cloud-only enterprise landing zone:
# - Azure AD Domain Services (managed domain service)
# - Key Vault for identity-related secrets with private endpoints
# - Log Analytics workspace for identity monitoring
# - User-assigned managed identities for workload authentication
# - Private DNS integration with connectivity subscription
#
# GITHUB ACTIONS CONDITIONALS GUIDE:
# 1. JOB-LEVEL CONDITIONALS (Different syntax rules):
#    - CORRECT ✓: if: env.VAR == 'value'
#    - WRONG ✗: if: ${{ env.VAR == 'value' }}
#
# 2. STEP-LEVEL CONDITIONALS:
#    - CORRECT ✓: if: ${{ steps.my_step.outputs.result == 'success' }}
#    - CORRECT ✓: if: ${{ env.MY_VAR == 'true' }}
#
# 3. SHELL SCRIPT CONDITIONALS:
#    - CORRECT ✓: if [ "${{ env.MY_VAR }}" == "true" ]; then
#    - WRONG ✗: if [ "env.MY_VAR" == "true" ]; then
#
# 4. WORKFLOW STRUCTURE:
#    - At least one job must have NO dependencies (no "needs" parameter)
#    - All other jobs should establish clear dependency chains
#    - Use job outputs to pass data between dependent jobs

name: Provision Identity

on:
  push:
    branches:
      - main
    paths:
      - 'identity/**'
      - '.github/workflows/deploy-identity.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      deployAadds:
        description: 'Deploy Azure AD Domain Services'
        required: true
        default: 'true'
        type: boolean

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-identity
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  DEPLOY_AADDS: ${{ github.event.inputs.deployAadds || 'true' }}

jobs:
  # ==========================================================================
  # VERIFY PREREQUISITES JOB - WORKFLOW ENTRY POINT (NO DEPENDENCIES)
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - This job has NO "needs" parameter - it will run first as the entry point
  # - Every GitHub Actions workflow MUST have at least one job without dependencies
  # - Validation before deployment prevents downstream failures
  # ==========================================================================
  verify-prerequisites:
    name: Verify Prerequisites
    # NO "needs" parameter - this is the workflow entry point!
    runs-on: ubuntu-latest
    outputs:
      resource_group: ${{ steps.set_outputs.outputs.resource_group }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          # Verify tenant ID
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "::error::AZURE_TENANT_ID secret is not set"
            exit 1
          fi
          
          # Verify client ID
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "::error::AZURE_CLIENT_ID secret is not set"
            exit 1
          fi
          
          # Verify subscription ID
          if [ -z "${{ secrets.IDENTITY_SUBSCRIPTION_ID }}" ]; then
            echo "::error::IDENTITY_SUBSCRIPTION_ID secret is not set"
            exit 1
          fi
          
          echo "All required secrets are configured."

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Verify Azure connectivity
        run: |
          echo "Verifying Azure permissions..."
          
          # Try to list resource groups to verify permissions
          if ! az group list --query "[].name" -o tsv &>/dev/null; then
            echo "::error::Unable to list resource groups. Check service principal permissions."
            exit 1
          fi
          
          echo "Azure connectivity verified successfully."
      
      - name: Set job outputs
        id: set_outputs
        run: |
          echo "resource_group=${{ env.RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT

  # ==========================================================================
  # DEPLOY IDENTITY INFRASTRUCTURE JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - This job depends on verify-prerequisites job completion
  # - Resource group and basic network infrastructure must be deployed first
  # - Network security and routing are critical for identity services
  # ==========================================================================
  deploy-identity-infrastructure:
    name: Deploy Identity Infrastructure
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    outputs:
      vnet_id: ${{ steps.deploy_network.outputs.vnet_id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} workload=identity deployedBy=GitHub
          
          echo "Resource group created or confirmed."
      
      - name: Deploy identity network
        id: deploy_network
        run: |
          echo "Deploying identity network infrastructure..."
          
          # Check if identity network template exists
          if [ ! -f "identity/network/identity-network.bicep" ]; then
            echo "::warning::identity-network.bicep not found. Creating minimal network template."
            
            # Create a minimal identity network Bicep file if it doesn't exist
            mkdir -p identity/network
            cat > identity/network/identity-network.bicep << 'EOF'
            // Identity Network for cloud-only deployment
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Address space for the identity virtual network')
            param addressPrefix string = '10.2.0.0/16'

            @description('Name of the identity virtual network')
            param vnetName string = 'vnet-identity'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Define subnets
            var subnets = [
              {
                name: 'snet-identity-services'
                properties: {
                  addressPrefix: '10.2.0.0/24'
                  privateEndpointNetworkPolicies: 'Disabled'
                }
              }
              {
                name: 'snet-domain-services'
                properties: {
                  addressPrefix: '10.2.1.0/24'
                }
              }
              {
                name: 'snet-private-endpoints'
                properties: {
                  addressPrefix: '10.2.2.0/24'
                  privateEndpointNetworkPolicies: 'Disabled'
                }
              }
            ]

            // Create Virtual Network
            resource identityVNet 'Microsoft.Network/virtualNetworks@2023-04-01' = {
              name: vnetName
              location: location
              tags: tags
              properties: {
                addressSpace: {
                  addressPrefixes: [
                    addressPrefix
                  ]
                }
                subnets: subnets
              }
            }

            // Output the VNet ID for use in other deployments
            output vnetId string = identityVNet.id
            output vnetName string = identityVNet.name
            EOF
          fi
          
          # Deploy network
          az deployment group create \
            --name "identity-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/network/identity-network.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
          
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "Identity network deployed successfully."

  # ==========================================================================
  # DEPLOY KEY VAULT JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Key Vault with private endpoint for secure secret storage
  # - Access policies align with least-privilege principles
  # - HSM protection for production secrets
  # ==========================================================================
  deploy-key-vault:
    name: Deploy Key Vault
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy Key Vault
        run: |
          echo "Deploying Key Vault for identity secrets..."
          
          # Get the identity VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          # Create private DNS zone for Key Vault if it doesn't exist
          echo "Creating private DNS zone for Key Vault..."
          if ! az network private-dns zone show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "privatelink.vaultcore.azure.net" &>/dev/null; then
            
            az network private-dns zone create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name "privatelink.vaultcore.azure.net"
              
            # Link private DNS zone to VNet
            az network private-dns link vnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --zone-name "privatelink.vaultcore.azure.net" \
              --name "link-to-identity-vnet" \
              --virtual-network $VNET_ID \
              --registration-enabled false
          fi
          
          # Check if Key Vault template exists and create if missing
          if [ ! -f "identity/key-vault/key-vault.bicep" ]; then
            mkdir -p identity/key-vault
            cat > identity/key-vault/key-vault.bicep << 'EOF'
            // Key Vault with private endpoint for identity resources
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Key Vault name')
            param keyVaultName string = 'kv-identity-${uniqueString(resourceGroup().id)}'

            @description('Azure AD tenant ID')
            param tenantId string

            @description('ID of the identity VNet')
            param vnetId string

            @description('Name of the subnet for private endpoints')
            param privateEndpointSubnetName string = 'snet-private-endpoints'

            @description('SKU name for Key Vault')
            param skuName string = 'premium'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Reference the subnet for private endpoint
            resource subnet 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' existing = {
              name: '${split(vnetId, '/')[8]}/${privateEndpointSubnetName}'
            }

            // Create Key Vault with enhanced security
            resource keyVault 'Microsoft.KeyVault/vaults@2023-02-01' = {
              name: keyVaultName
              location: location
              tags: tags
              properties: {
                sku: {
                  family: 'A'
                  name: skuName
                }
                tenantId: tenantId
                enabledForDeployment: true
                enabledForDiskEncryption: true
                enabledForTemplateDeployment: true
                enableRbacAuthorization: true
                enableSoftDelete: true
                softDeleteRetentionInDays: 90
                publicNetworkAccess: 'Disabled'
                networkAcls: {
                  bypass: 'AzureServices'
                  defaultAction: 'Deny'
                }
              }
            }

            // Create private endpoint for Key Vault
            resource privateEndpoint 'Microsoft.Network/privateEndpoints@2023-04-01' = {
              name: 'pe-${keyVaultName}'
              location: location
              tags: tags
              properties: {
                subnet: {
                  id: subnet.id
                }
                privateLinkServiceConnections: [
                  {
                    name: 'connection-to-${keyVaultName}'
                    properties: {
                      privateLinkServiceId: keyVault.id
                      groupIds: [
                        'vault'
                      ]
                    }
                  }
                ]
              }
            }

            // Output Key Vault resource ID
            output keyVaultId string = keyVault.id
            output keyVaultName string = keyVault.name
            EOF
          fi
          
          # Deploy Key Vault
          echo "Deploying Key Vault..."
          az deployment group create \
            --name "key-vault-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/key-vault/key-vault.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         tenantId=${{ env.AZURE_TENANT_ID }} \
                         vnetId=$VNET_ID
          
          echo "Key Vault deployed successfully."

  # ==========================================================================
  # DEPLOY MANAGED IDENTITIES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Managed identities for workload authentication
  # - User-assigned identities for better control and lifecycle management
  # - Add appropriate RBAC assignments based on workload needs
  # ==========================================================================
  deploy-managed-identities:
    name: Deploy Managed Identities
    needs: deploy-key-vault
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create managed identities template
        run: |
          echo "Creating managed identities template..."
          
          mkdir -p identity/managed-identity
          cat > identity/managed-identity/managed-identities.bicep << 'EOF'
          // User-assigned managed identities for workloads
          @description('Azure region for all resources')
          param location string = resourceGroup().location

          @description('Environment name')
          param environment string = 'production'

          @description('Tags to apply to all resources')
          param tags object = {
            environment: environment
            workload: 'identity'
            deployment: 'bicep'
          }

          // Create user-assigned managed identities
          resource appManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
            name: 'id-app-services'
            location: location
            tags: tags
          }

          resource dataWorkloadIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
            name: 'id-data-workloads'
            location: location
            tags: tags
          }

          resource automationIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
            name: 'id-automation'
            location: location
            tags: tags
          }

          // Outputs for reference in other deployments
          output appIdentityId string = appManagedIdentity.id
          output appIdentityPrincipalId string = appManagedIdentity.properties.principalId
          
          output dataWorkloadIdentityId string = dataWorkloadIdentity.id
          output dataWorkloadPrincipalId string = dataWorkloadIdentity.properties.principalId
          
          output automationIdentityId string = automationIdentity.id
          output automationPrincipalId string = automationIdentity.properties.principalId
          EOF
          
          echo "Managed identities template created."
      
      - name: Deploy managed identities
        run: |
          echo "Deploying managed identities..."
          
          # Deploy managed identities
          az deployment group create \
            --name "managed-identities-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/managed-identity/managed-identities.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
          
          echo "Managed identities deployed successfully."

  # ==========================================================================
  # DEPLOY AZURE AD DOMAIN SERVICES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Azure AD DS provides managed domain services for a cloud-only environment
  # - Only deployed if specifically requested (costly service)
  # - Requires careful network configuration and security groups
  # - CRITICAL FIX: Use simplified syntax for job-level conditionals 
  # ==========================================================================
  deploy-azure-ad-domain-services:
    name: Deploy Azure AD Domain Services
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    # FIXED: Using simplified syntax for job-level conditional - no curly braces
    if: env.DEPLOY_AADDS == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create AADDS template
        run: |
          echo "Creating Azure AD Domain Services template..."
          
          mkdir -p identity/aadds
          cat > identity/aadds/aadds.bicep << 'EOF'
          // Azure AD Domain Services for cloud-only environment
          @description('Azure region for all resources')
          param location string = resourceGroup().location

          @description('Environment name')
          param environment string = 'production'

          @description('Domain name for AADDS')
          param domainName string = 'aadds.contoso.com'

          @description('SKU for AADDS')
          @allowed(['Standard', 'Enterprise', 'Premium'])
          param sku string = 'Standard'

          @description('ID of the identity VNet')
          param vnetId string

          @description('Name of the subnet for AADDS')
          param aaddsSubnetName string = 'snet-domain-services'

          @description('Tags to apply to all resources')
          param tags object = {
            environment: environment
            workload: 'identity'
            deployment: 'bicep'
          }

          // Extract subscription ID and resource group name from VNet ID
          var vnetSubscriptionId = split(vnetId, '/')[2]
          var vnetResourceGroup = split(vnetId, '/')[4]
          var vnetName = split(vnetId, '/')[8]

          // Reference the subnet for AADDS
          resource subnet 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' existing = {
            name: '${vnetName}/${aaddsSubnetName}'
            scope: resourceGroup(vnetSubscriptionId, vnetResourceGroup)
          }

          // Create a Network Security Group for AADDS
          resource aaddsNsg 'Microsoft.Network/networkSecurityGroups@2023-04-01' = {
            name: 'nsg-aadds'
            location: location
            tags: tags
            properties: {
              securityRules: [
                {
                  name: 'AllowLDAPS'
                  properties: {
                    priority: 201
                    direction: 'Inbound'
                    access: 'Allow'
                    protocol: 'Tcp'
                    sourceAddressPrefix: '*'
                    sourcePortRange: '*'
                    destinationAddressPrefix: '*'
                    destinationPortRange: '636'
                  }
                }
                {
                  name: 'AllowLDAP'
                  properties: {
                    priority: 202
                    direction: 'Inbound'
                    access: 'Allow'
                    protocol: 'Tcp'
                    sourceAddressPrefix: '*'
                    sourcePortRange: '*'
                    destinationAddressPrefix: '*'
                    destinationPortRange: '389'
                  }
                }
                {
                  name: 'AllowKerberos'
                  properties: {
                    priority: 203
                    direction: 'Inbound'
                    access: 'Allow'
                    protocol: 'Tcp'
                    sourceAddressPrefix: '*'
                    sourcePortRange: '*'
                    destinationAddressPrefix: '*'
                    destinationPortRange: '88'
                  }
                }
              ]
            }
          }

          // Associate NSG with the subnet
          resource subnetWithNsg 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' = {
            name: '${vnetName}/${aaddsSubnetName}'
            properties: {
              addressPrefix: subnet.properties.addressPrefix
              networkSecurityGroup: {
                id: aaddsNsg.id
              }
            }
          }

          // Deploy Azure AD Domain Services
          resource aadds 'Microsoft.AAD/domainServices@2022-12-01' = {
            name: 'aadds-${environment}'
            location: location
            tags: tags
            properties: {
              domainName: domainName
              domainConfigurationType: 'FullySynced'
              sku: sku
              replicaSets: [
                {
                  subnetId: subnet.id
                  location: location
                }
              ]
            }
            dependsOn: [
              subnetWithNsg
            ]
          }

          // Output AADDS resource ID
          output aaddsId string = aadds.id
          output aaddsName string = aadds.name
          EOF
          
          echo "Azure AD Domain Services template created."
      
      - name: Deploy Azure AD Domain Services
        run: |
          echo "Deploying Azure AD Domain Services..."
          
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
            
          # Deploy AADDS
          az deployment group create \
            --name "aadds-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/aadds/aadds.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         vnetId=$VNET_ID \
                         domainName="aadds.${{ env.AZURE_TENANT_ID }}.onmicrosoft.com"
          
          echo "Azure AD Domain Services deployment initiated."
          echo "Note: AADDS deployment can take 1-2 hours to complete."

  # ==========================================================================
  # VERIFY IDENTITY RESOURCES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Validation ensures all resources deployed successfully
  # - Documentation shows what was deployed and where
  # - Helps in troubleshooting deployment issues
  # - AADDS verification is conditional since it's optional
  # ==========================================================================
  verify-identity-resources:
    name: Verify Identity Resources
    needs: [deploy-key-vault, deploy-managed-identities]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed identity resources..."
          
          # List all resources in the resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for key components
          echo "Checking for key identity components..."
          
          # Check for VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" &>/dev/null; then
            echo "✅ Identity VNet verified"
            
            # List subnets
            echo "Subnets in identity VNet:"
            az network vnet subnet list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --vnet-name "vnet-identity" \
              --query "[].{Name:name, Prefix:addressPrefix}" \
              --output table
          else
            echo "❌ Identity VNet not found"
          fi
          
          # Check for Key Vault
          KV_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[0].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$KV_NAME" ]; then
            echo "✅ Key Vault verified: $KV_NAME"
          else
            echo "❌ Key Vault not found"
          fi
          
          # Check for Managed Identities
          IDENTITIES=$(az identity list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$IDENTITIES" ]; then
            echo "✅ Managed identities verified:"
            echo "$IDENTITIES"
          else
            echo "❌ Managed identities not found"
          fi
          
          # Use proper expression syntax for shell scripts
          if [ "${{ env.DEPLOY_AADDS }}" == "true" ]; then
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.AAD/domainServices" \
              --query "[0].name" -o tsv &>/dev/null; then
              echo "✅ Azure AD Domain Services deployment initiated"
              echo "Note: Full provisioning may take 1-2 hours to complete"
            else
              echo "❓ Azure AD Domain Services not found yet (deployment may still be in progress)"
            fi
          fi
          
          # Generate deployment report
          cat << EOF > $GITHUB_STEP_SUMMARY
          # Identity Resources Deployment Summary
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          **Environment:** ${{ env.ENVIRONMENT }}
          **Region:** ${{ env.LOCATION }}
          **Date/Time UTC:** $(date -u +"%Y-%m-%d %H:%M:%S")
          
          ## Deployed Resources
          
          | Resource Type | Status |
          |--------------|--------|
          | Virtual Network | $(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name "vnet-identity" &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Key Vault | $(az keyvault list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Managed Identities | $(az identity list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Azure AD Domain Services | $([ "${{ env.DEPLOY_AADDS }}" == "true" ] && (az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.AAD/domainServices" --query "[].name" -o tsv &>/dev/null && echo "✅ Deploying" || echo "❓ In progress") || echo "⚪ Not Requested") |
          
          ## GitHub Actions Conditionals Reference
          
          | Context | Correct Syntax | Notes |
          |---------|---------------|-------|
          | Job-level if | \`if: env.VAR == 'value'\` | No curly braces needed |
          | Step-level if | \`if: \${{ steps.id.outputs.value == 'true' }}\` | Curly braces required |
          | Shell scripts | \`if [ "\${{ env.VAR }}" == "value" ]\` | Curly braces required for variable |
          
          Deployment completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF