# ==========================================================================
# Enterprise Azure Landing Zone - Identity Resources Deployment
# ==========================================================================
# PROMPT ENGINEERING GUIDANCE:
# This workflow provisions core identity resources for a cloud-only enterprise landing zone.
#
# 🚨 GITHUB ACTIONS CONDITIONAL SYNTAX RULES 🚨
# =============================================
# Different contexts require different syntax patterns:
#
# 1️⃣ JOB-LEVEL CONDITIONALS:
#    ✅ if: env.DEPLOY_AADDS == 'true'           (CORRECT: no curly braces)
#    ❌ if: ${{ env.DEPLOY_AADDS == 'true' }}    (WRONG: has curly braces)
#
# 2️⃣ STEP-LEVEL CONDITIONALS:
#    ✅ if: ${{ steps.check.outputs.result == 'success' }}    (CORRECT: has curly braces)
#    ❌ if: steps.check.outputs.result == 'success'           (WRONG: no curly braces)
#
# 3️⃣ SHELL SCRIPT VARIABLES:
#    ✅ if [ "${{ env.DEPLOY_AADDS }}" == "true" ]    (CORRECT: has curly braces)
#    ❌ if [ "env.DEPLOY_AADDS" == "true" ]           (WRONG: no curly braces)
#
# 4️⃣ WORKFLOW STRUCTURE:
#    ✅ At least one job MUST have no dependencies (no "needs" parameter)
# =============================================

name: Provision Identity

on:
  push:
    branches:
      - main
    paths:
      - 'identity/**'
      - '.github/workflows/deploy-identity.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - nonproduction
          - development
      region:
        description: 'Azure region for deployment'
        required: true
        default: 'eastus2'
        type: string
      deployAadds:
        description: 'Deploy Azure AD Domain Services'
        required: true
        default: 'true'
        type: boolean

permissions:
  id-token: write  # Required for OIDC federation
  contents: read   # Required to read repo files

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  IDENTITY_SUBSCRIPTION_ID: ${{ secrets.IDENTITY_SUBSCRIPTION_ID }}
  CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: rg-identity
  LOCATION: ${{ github.event.inputs.region || 'eastus2' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  DEPLOY_AADDS: ${{ github.event.inputs.deployAadds || 'true' }}

jobs:
  # ==========================================================================
  # VERIFY PREREQUISITES JOB - WORKFLOW ENTRY POINT
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - This job has NO "needs" parameter - required as the workflow entry point
  # - Every GitHub Actions workflow MUST have at least one job without dependencies
  # ==========================================================================
  verify-prerequisites:
    name: Verify Prerequisites
    # No "needs" parameter here - this is the workflow entry point
    runs-on: ubuntu-latest
    outputs:
      tenant_id: ${{ steps.output_params.outputs.tenant_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          # Verify tenant ID
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "::error::AZURE_TENANT_ID secret is not set"
            exit 1
          fi
          
          # Verify client ID
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "::error::AZURE_CLIENT_ID secret is not set"
            exit 1
          fi
          
          # Verify subscription ID
          if [ -z "${{ secrets.IDENTITY_SUBSCRIPTION_ID }}" ]; then
            echo "::error::IDENTITY_SUBSCRIPTION_ID secret is not set"
            exit 1
          fi
          
          echo "All required secrets are configured."

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Verify Azure connectivity
        run: |
          echo "Verifying Azure permissions..."
          
          # Try to list resource groups to verify permissions
          if ! az group list --query "[].name" -o tsv &>/dev/null; then
            echo "::error::Unable to list resource groups. Check service principal permissions."
            exit 1
          fi
          
          echo "Azure connectivity verified successfully."
          
      - name: Set output parameters
        id: output_params
        run: |
          echo "tenant_id=${{ env.AZURE_TENANT_ID }}" >> $GITHUB_OUTPUT

  # ==========================================================================
  # DEPLOY IDENTITY INFRASTRUCTURE JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - This job depends on verify-prerequisites job completion
  # - Resource group and networks must be deployed before identity services
  # ==========================================================================
  deploy-identity-infrastructure:
    name: Deploy Identity Infrastructure
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    outputs:
      vnet_id: ${{ steps.vnet_output.outputs.vnet_id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Create resource group
        run: |
          echo "Creating resource group ${{ env.RESOURCE_GROUP_NAME }} in ${{ env.LOCATION }}..."
          
          az group create \
            --name ${{ env.RESOURCE_GROUP_NAME }} \
            --location ${{ env.LOCATION }} \
            --tags environment=${{ env.ENVIRONMENT }} workload=identity deployedBy=GitHub
          
          echo "Resource group created or confirmed."
      
      - name: Deploy identity network
        id: deploy_network
        run: |
          echo "Deploying identity network infrastructure..."
          
          # Check if identity network template exists
          if [ ! -f "identity/network/identity-network.bicep" ]; then
            echo "::warning::identity-network.bicep not found. Creating minimal network template."
            
            # Create a minimal identity network Bicep file if it doesn't exist
            mkdir -p identity/network
            cat > identity/network/identity-network.bicep << 'EOF'
            // Identity Network for cloud-only deployment
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Address space for the identity virtual network')
            param addressPrefix string = '10.2.0.0/16'

            @description('Name of the identity virtual network')
            param vnetName string = 'vnet-identity'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Define subnets
            var subnets = [
              {
                name: 'snet-identity-services'
                properties: {
                  addressPrefix: '10.2.0.0/24'
                  privateEndpointNetworkPolicies: 'Disabled'
                }
              }
              {
                name: 'snet-domain-services'
                properties: {
                  addressPrefix: '10.2.1.0/24'
                }
              }
              {
                name: 'snet-private-endpoints'
                properties: {
                  addressPrefix: '10.2.2.0/24'
                  privateEndpointNetworkPolicies: 'Disabled'
                }
              }
            ]

            // Create Virtual Network
            resource identityVNet 'Microsoft.Network/virtualNetworks@2023-04-01' = {
              name: vnetName
              location: location
              tags: tags
              properties: {
                addressSpace: {
                  addressPrefixes: [
                    addressPrefix
                  ]
                }
                subnets: subnets
              }
            }

            // Output the VNet ID for use in other deployments
            output vnetId string = identityVNet.id
            output vnetName string = identityVNet.name
            EOF
          fi
          
          # Deploy network
          az deployment group create \
            --name "identity-network-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/network/identity-network.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
      
      - name: Get VNet ID
        id: vnet_output
        run: |
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "Identity network deployed successfully."

  # ==========================================================================
  # DEPLOY KEY VAULT JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Key Vault with private endpoint for secure secret storage
  # - Access policies align with least-privilege principles
  # - HSM protection for production secrets
  # ==========================================================================
  deploy-key-vault:
    name: Deploy Key Vault
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy Key Vault
        run: |
          echo "Deploying Key Vault for identity secrets..."
          
          # Get the identity VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
          
          # Create private DNS zone for Key Vault if it doesn't exist
          echo "Creating private DNS zone for Key Vault..."
          if ! az network private-dns zone show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "privatelink.vaultcore.azure.net" &>/dev/null; then
            
            az network private-dns zone create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name "privatelink.vaultcore.azure.net"
              
            # Link private DNS zone to VNet
            az network private-dns link vnet create \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --zone-name "privatelink.vaultcore.azure.net" \
              --name "link-to-identity-vnet" \
              --virtual-network $VNET_ID \
              --registration-enabled false
          fi
          
          # Check if Key Vault template exists
          if [ ! -f "identity/key-vault/key-vault.bicep" ]; then
            mkdir -p identity/key-vault
            cat > identity/key-vault/key-vault.bicep << 'EOF'
            // Key Vault with private endpoint for identity resources
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Key Vault name')
            param keyVaultName string = 'kv-identity-${uniqueString(resourceGroup().id)}'

            @description('Azure AD tenant ID')
            param tenantId string

            @description('ID of the identity VNet')
            param vnetId string

            @description('Name of the subnet for private endpoints')
            param privateEndpointSubnetName string = 'snet-private-endpoints'

            @description('SKU name for Key Vault')
            param skuName string = 'premium'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Reference the subnet for private endpoint
            resource subnet 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' existing = {
              name: '${split(vnetId, '/')[8]}/${privateEndpointSubnetName}'
            }

            // Create Key Vault with enhanced security
            resource keyVault 'Microsoft.KeyVault/vaults@2023-02-01' = {
              name: keyVaultName
              location: location
              tags: tags
              properties: {
                sku: {
                  family: 'A'
                  name: skuName
                }
                tenantId: tenantId
                enabledForDeployment: true
                enabledForDiskEncryption: true
                enabledForTemplateDeployment: true
                enableRbacAuthorization: true
                enableSoftDelete: true
                softDeleteRetentionInDays: 90
                publicNetworkAccess: 'Disabled'
                networkAcls: {
                  bypass: 'AzureServices'
                  defaultAction: 'Deny'
                }
              }
            }

            // Create private endpoint for Key Vault
            resource privateEndpoint 'Microsoft.Network/privateEndpoints@2023-04-01' = {
              name: 'pe-${keyVaultName}'
              location: location
              tags: tags
              properties: {
                subnet: {
                  id: subnet.id
                }
                privateLinkServiceConnections: [
                  {
                    name: 'connection-to-${keyVaultName}'
                    properties: {
                      privateLinkServiceId: keyVault.id
                      groupIds: [
                        'vault'
                      ]
                    }
                  }
                ]
              }
            }

            // Output Key Vault resource ID
            output keyVaultId string = keyVault.id
            output keyVaultName string = keyVault.name
            EOF
          fi
          
          # Deploy Key Vault
          echo "Deploying Key Vault..."
          az deployment group create \
            --name "key-vault-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/key-vault/key-vault.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         tenantId=${{ env.AZURE_TENANT_ID }} \
                         vnetId=$VNET_ID
          
          echo "Key Vault deployed successfully."

  # ==========================================================================
  # DEPLOY MANAGED IDENTITIES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Managed identities for workload authentication
  # - User-assigned identities for better control and lifecycle management
  # ==========================================================================
  deploy-managed-identities:
    name: Deploy Managed Identities
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy managed identities
        run: |
          echo "Deploying managed identities..."
          
          # Create a directory for managed identities if it doesn't exist
          mkdir -p identity/managed-identity
          
          # Create template file if it doesn't exist
          if [ ! -f "identity/managed-identity/managed-identities.bicep" ]; then
            cat > identity/managed-identity/managed-identities.bicep << 'EOF'
            // User-assigned managed identities for workloads
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Create user-assigned managed identities
            resource appManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
              name: 'id-app-services'
              location: location
              tags: tags
            }

            resource dataWorkloadIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
              name: 'id-data-workloads'
              location: location
              tags: tags
            }

            resource automationIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
              name: 'id-automation'
              location: location
              tags: tags
            }

            // Outputs for reference in other deployments
            output appIdentityId string = appManagedIdentity.id
            output appIdentityPrincipalId string = appManagedIdentity.properties.principalId
            
            output dataWorkloadIdentityId string = dataWorkloadIdentity.id
            output dataWorkloadPrincipalId string = dataWorkloadIdentity.properties.principalId
            
            output automationIdentityId string = automationIdentity.id
            output automationPrincipalId string = automationIdentity.properties.principalId
            EOF
          fi
          
          # Deploy managed identities
          az deployment group create \
            --name "managed-identities-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/managed-identity/managed-identities.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} location=${{ env.LOCATION }}
          
          echo "Managed identities deployed successfully."

  # ==========================================================================
  # DEPLOY AZURE AD DOMAIN SERVICES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Azure AD DS provides managed domain services for a cloud-only environment
  # - Only deployed if specifically requested (costly service)
  # - CRITICAL FIX ON LINE 513: Job-level conditionals MUST use simplified syntax
  # ==========================================================================
  deploy-azure-ad-domain-services:
    name: Deploy Azure AD Domain Services
    needs: deploy-identity-infrastructure
    runs-on: ubuntu-latest
    # ⚠️ CRITICAL FIX: Job-level conditionals use simplified syntax WITHOUT ${{ }} braces
    if: env.DEPLOY_AADDS == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: Deploy Azure AD Domain Services
        run: |
          echo "Deploying Azure AD Domain Services..."
          
          # Create directory if it doesn't exist
          mkdir -p identity/aadds
          
          # Create template file if it doesn't exist
          if [ ! -f "identity/aadds/aadds.bicep" ]; then
            cat > identity/aadds/aadds.bicep << 'EOF'
            // Azure AD Domain Services for cloud-only environment
            @description('Azure region for all resources')
            param location string = resourceGroup().location

            @description('Environment name')
            param environment string = 'production'

            @description('Domain name for AADDS')
            param domainName string = 'aadds.contoso.com'

            @description('SKU for AADDS')
            @allowed(['Standard', 'Enterprise', 'Premium'])
            param sku string = 'Standard'

            @description('ID of the identity VNet')
            param vnetId string

            @description('Name of the subnet for AADDS')
            param aaddsSubnetName string = 'snet-domain-services'

            @description('Tags to apply to all resources')
            param tags object = {
              environment: environment
              workload: 'identity'
              deployment: 'bicep'
            }

            // Extract VNet name from VNet ID
            var vnetName = split(vnetId, '/')[8]

            // Reference the subnet for AADDS
            resource subnet 'Microsoft.Network/virtualNetworks/subnets@2023-04-01' existing = {
              name: '${vnetName}/${aaddsSubnetName}'
            }

            // Create a Network Security Group for AADDS
            resource aaddsNsg 'Microsoft.Network/networkSecurityGroups@2023-04-01' = {
              name: 'nsg-aadds'
              location: location
              tags: tags
              properties: {
                securityRules: [
                  {
                    name: 'AllowLDAPS'
                    properties: {
                      priority: 201
                      direction: 'Inbound'
                      access: 'Allow'
                      protocol: 'Tcp'
                      sourceAddressPrefix: '*'
                      sourcePortRange: '*'
                      destinationAddressPrefix: '*'
                      destinationPortRange: '636'
                    }
                  }
                  {
                    name: 'AllowLDAP'
                    properties: {
                      priority: 202
                      direction: 'Inbound'
                      access: 'Allow'
                      protocol: 'Tcp'
                      sourceAddressPrefix: '*'
                      sourcePortRange: '*'
                      destinationAddressPrefix: '*'
                      destinationPortRange: '389'
                    }
                  }
                  {
                    name: 'AllowKerberos'
                    properties: {
                      priority: 203
                      direction: 'Inbound'
                      access: 'Allow'
                      protocol: 'Tcp'
                      sourceAddressPrefix: '*'
                      sourcePortRange: '*'
                      destinationAddressPrefix: '*'
                      destinationPortRange: '88'
                    }
                  }
                ]
              }
            }

            // Deploy Azure AD Domain Services
            resource aadds 'Microsoft.AAD/domainServices@2022-12-01' = {
              name: 'aadds-${environment}'
              location: location
              tags: tags
              properties: {
                domainName: domainName
                domainConfigurationType: 'FullySynced'
                sku: sku
                replicaSets: [
                  {
                    subnetId: subnet.id
                    location: location
                  }
                ]
              }
            }

            // Output AADDS resource ID
            output aaddsId string = aadds.id
            output aaddsName string = aadds.name
            EOF
          fi
          
          # Get the VNet ID
          VNET_ID=$(az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" \
            --query id -o tsv)
            
          # Deploy AADDS
          az deployment group create \
            --name "aadds-$(date +%Y%m%d%H%M%S)" \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file identity/aadds/aadds.bicep \
            --parameters environment=${{ env.ENVIRONMENT }} \
                         location=${{ env.LOCATION }} \
                         vnetId=$VNET_ID \
                         domainName="aadds.${{ needs.verify-prerequisites.outputs.tenant_id }}.onmicrosoft.com"
          
          echo "Azure AD Domain Services deployment initiated."
          echo "Note: AADDS deployment can take 1-2 hours to complete."

  # ==========================================================================
  # VERIFY IDENTITY RESOURCES JOB
  # ==========================================================================
  # PROMPT GUIDANCE:
  # - Verify all deployed resources at the end of the workflow
  # - Create summary report for easy validation
  # - Show diagnostic information for any failures
  # ==========================================================================
  verify-identity-resources:
    name: Verify Identity Resources
    needs: [deploy-key-vault, deploy-managed-identities]
    # Using "always()" to run even if some jobs fail
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.IDENTITY_SUBSCRIPTION_ID }}
      
      - name: List and verify deployed resources
        run: |
          echo "Verifying deployed identity resources..."
          
          # List all resources in the resource group
          echo "Resources in ${{ env.RESOURCE_GROUP_NAME }}:"
          az resource list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --output table
          
          # Check for key components
          echo "Checking for key identity components..."
          
          # Check for VNet
          if az network vnet show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name "vnet-identity" &>/dev/null; then
            echo "✅ Identity VNet verified"
          else
            echo "❌ Identity VNet not found"
          fi
          
          # Check for Key Vault
          KV_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[0].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$KV_NAME" ]; then
            echo "✅ Key Vault verified: $KV_NAME"
          else
            echo "❌ Key Vault not found"
          fi
          
          # Check for Managed Identities
          IDENTITIES=$(az identity list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[].name" -o tsv 2>/dev/null || echo "")
            
          if [ -n "$IDENTITIES" ]; then
            echo "✅ Managed identities verified:"
            echo "$IDENTITIES"
          else
            echo "❌ Managed identities not found"
          fi
          
          # Note: Using proper variable reference syntax in shell scripts
          if [ "${{ env.DEPLOY_AADDS }}" == "true" ]; then
            if az resource list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --resource-type "Microsoft.AAD/domainServices" \
              --query "[0].name" -o tsv &>/dev/null; then
              echo "✅ Azure AD Domain Services deployment initiated"
              echo "Note: Full provisioning may take 1-2 hours to complete"
            else
              echo "❓ Azure AD Domain Services not found yet (deployment may still be in progress)"
            fi
          fi
          
          # Generate summary report
          cat << EOF > $GITHUB_STEP_SUMMARY
          # Identity Resources Deployment Results
          
          **Resource Group:** ${{ env.RESOURCE_GROUP_NAME }}
          **Environment:** ${{ env.ENVIRONMENT }}
          **Region:** ${{ env.LOCATION }}
          **Date/Time UTC:** $(date -u +"%Y-%m-%d %H:%M:%S")
          
          ## Deployed Resources
          
          | Resource Type | Status |
          |--------------|--------|
          | Virtual Network | $(az network vnet show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name "vnet-identity" &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Key Vault | $(az keyvault list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Managed Identities | $(az identity list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[].name" -o tsv &>/dev/null && echo "✅ Deployed" || echo "❌ Missing") |
          | Azure AD Domain Services | $([ "${{ env.DEPLOY_AADDS }}" == "true" ] && (az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.AAD/domainServices" --query "[].name" -o tsv &>/dev/null && echo "✅ Deploying" || echo "❓ In progress") || echo "⚪ Not Requested") |
          
          ## GitHub Actions Conditional Syntax Reference
          
          | Context | Correct Example | Incorrect Example |
          |---------|----------------|------------------|
          | Job-level if | \`if: env.VAR == 'true'\` | \`if: \${{ env.VAR == 'true' }}\` |
          | Step-level if | \`if: \${{ steps.id.outputs.value == 'true' }}\` | \`if: steps.id.outputs.value == 'true'\` |
          | Shell scripts | \`if [ "\${{ env.VAR }}" == "true" ]\` | \`if [ "env.VAR" == "true" ]\` |
          
          ## Next Steps
          
          1. Confirm Azure AD Domain Services deployment (takes 1-2 hours)
          2. Configure domain join settings for VMs
          3. Set up Key Vault access policies for applications
          4. Assign appropriate roles to managed identities
          
          Deployment completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF